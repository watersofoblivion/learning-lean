/-
# Inductive Types
-/

/-
## Enumerated Types
-/

inductive Weekday: Type where
  | sunday: Weekday
  | monday: Weekday
  | tuesday: Weekday
  | wednesday: Weekday
  | thursday: Weekday
  | friday: Weekday
  | saturday: Weekday
deriving Repr

#check Weekday.sunday
#check Weekday.monday

section
  open Weekday

  #check sunday
  #check monday
end

def Weekday.numberOfDay: Weekday ‚Üí Nat
  | .sunday => 1
  | .monday => 2
  | .tuesday => 3
  | .wednesday => 4
  | .thursday => 5
  | .friday => 6
  | .saturday => 7

#eval Weekday.sunday.numberOfDay
#eval Weekday.monday.numberOfDay
#eval Weekday.tuesday.numberOfDay

section
  set_option pp.all true

  #print Weekday.numberOfDay
  -- #print Weekday.numberOfDay.match_1
  #print Weekday.casesOn
  #print Weekday.rec
end

def Weekday.next: Weekday ‚Üí Weekday
  | .sunday => .monday
  | .monday => .tuesday
  | .tuesday => .wednesday
  | .wednesday => .thursday
  | .thursday => .friday
  | .friday => .saturday
  | .saturday => .sunday

def Weekday.previous: Weekday ‚Üí Weekday
  | .sunday => .saturday
  | .monday => .sunday
  | .tuesday => .monday
  | .wednesday => .tuesday
  | .thursday => .wednesday
  | .friday => .thursday
  | .saturday => .friday

#eval Weekday.tuesday.next.next
#eval Weekday.tuesday.previous.next

example (w: Weekday): w.previous.next = w := by
  cases w <;> rfl

example (w: Weekday): w.previous.next = w :=
  match w with
    | .sunday => rfl
    | .monday=> rfl
    | .tuesday => rfl
    | .wednesday => rfl
    | .thursday => rfl
    | .friday => rfl
    | .saturday => rfl

example (w: Weekday): w.previous.next = w :=
  match w with
    | .sunday | .monday | .tuesday | .wednesday | .thursday | .friday | .saturday => rfl

inductive ùîπ: Type where
  | true: ùîπ
  | false: ùîπ

def ùîπ.band: ùîπ ‚Üí ùîπ ‚Üí ùîπ
  | .true, .true => .true
  | _, _ => .false

/-
## Constructors with Arguments
-/

namespace Hidden
  inductive Prod (Œ±: Type) (Œ≤: Type): Type where
    | mk: Œ± ‚Üí Œ≤ ‚Üí Prod Œ± Œ≤

  inductive Sum (Œ±: Type) (Œ≤: Type): Type where
    | inl: Œ± ‚Üí Sum Œ± Œ≤
    | inr: Œ≤ ‚Üí Sum Œ± Œ≤

  def Prod.fst: Prod Œ± Œ≤ ‚Üí Œ±
    | mk a _ => a
  def Prod.snd: Prod Œ± Œ≤ ‚Üí Œ≤
    | mk _ b => b

  def Prod.example (p: Prod Bool Nat): Nat :=
    Prod.casesOn (motive := fun _ => Nat) p mk
    where
      mk (b: Bool) (n: Nat): Nat := cond b (2 * n) (2 * n + 1)

  def Sum.example (s: Sum Nat Nat): Nat :=
    Sum.casesOn (motive := fun _ => Nat) s inl inr
    where
      inl (n: Nat): Nat := 2 * n
      inr (n: Nat): Nat := 2 * n + 1

  #eval (Sum.inl 3).example
  #eval (Sum.inr 3).example

  structure ProdStruct (Œ±: Type) (Œ≤: Type): Type where
    fst: Œ±
    snd: Œ≤

  #check (‚ü®1, true‚ü©: ProdStruct Nat Bool)

  structure Color: Type where
    red: Nat
    green: Nat
    blue: Nat
  deriving Repr

  def yellow: Color := Color.mk 255 255 0
  #eval yellow.red

  structure Semigroup where
    carrier: Type u
    mul: carrier ‚Üí carrier ‚Üí carrier
    mulAssoc: ‚àÄ (a b c: carrier), mul (mul a b) c = mul a (mul b c)

  inductive Sigma {Œ±: Type u} (Œ≤: Œ± ‚Üí Type v) where
    | mk: (a: Œ±) ‚Üí Œ≤ a ‚Üí Sigma Œ≤

  inductive Option (Œ±: Type): Type where
    | some: Œ± ‚Üí Option Œ±
    | none: Option Œ±

  inductive Inhabited (Œ±: Type): Type where
    | mk: Œ± ‚Üí Inhabited Œ±
end Hidden

/-
## Inductively Defined Propositions
-/

namespace Hidden
  inductive False: Prop

  inductive True: Prop where
    | intro: True

  inductive And (a b: Prop): Prop where
    | intro: a ‚Üí b ‚Üí And a b

  inductive Or (a b: Prop): Prop where
    | inl: a ‚Üí Or a b
    | inr: b ‚Üí Or a b

  inductive Exists {Œ±: Sort u} (p: Œ± ‚Üí Prop): Prop where
    | mk (w: Œ±): p w ‚Üí Exists p

  inductive Subtype {Œ±: Sort u} (p: Œ± ‚Üí Prop) where
    | mk (w: Œ±): p w ‚Üí Subtype p
end Hidden

/-
## Defining the Natural Numbers
-/

namespace Hidden
  inductive Nat: Type where
    | zero: Nat
    | succ: Nat ‚Üí Nat
  deriving Repr

  #check @Nat.rec
  #check @Nat.recOn

  def Nat.add: Nat ‚Üí Nat ‚Üí Nat
    | n, .zero => n
    | n‚ÇÅ, .succ n‚ÇÇ => .succ (n‚ÇÅ.add n‚ÇÇ)

  #eval (Nat.zero.succ.succ.add Nat.zero.succ)

  instance: Add Nat where
    add := Nat.add

  #eval (Nat.zero.succ.succ + Nat.zero.succ)

  theorem Nat.addZero (n: Nat): n + Nat.zero = n := rfl
  theorem Nat.addSucc (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ + n‚ÇÇ.succ = Nat.succ (n‚ÇÅ + n‚ÇÇ) := rfl
end Hidden

#print Nat.add
#check Nat.recOn

theorem Nat.zeroAdd (n: Nat): 0 + n = n :=
  Nat.recOn (motive := fun x => 0 + x = x) n base induct
  where
    base := rfl
    induct (n: Nat) (h: 0 + n = n) :=
      calc 0 + succ n
        _ = succ (0 + n) := rfl
        _ = succ n       := by rw [h]

example: 0 + n = n :=
  Nat.recOn
    (motive := fun x => 0 + x = x)
    n
    rfl
    (by simp_all)

theorem Nat.addAssoc (n‚ÇÅ n‚ÇÇ n‚ÇÉ: Nat): n‚ÇÅ + n‚ÇÇ + n‚ÇÉ = n‚ÇÅ + (n‚ÇÇ + n‚ÇÉ) :=
  Nat.recOn (motive := fun k => n‚ÇÅ + n‚ÇÇ + k = n‚ÇÅ + (n‚ÇÇ + k)) n‚ÇÉ
    base induct
  where
    base := rfl
    induct (k: Nat) (h: n‚ÇÅ + n‚ÇÇ + k = n‚ÇÅ + (n‚ÇÇ + k)) :=
      calc n‚ÇÅ + n‚ÇÇ + k.succ
        _ = succ (n‚ÇÅ + n‚ÇÇ + k)   := rfl
        _ = succ (n‚ÇÅ + (n‚ÇÇ + k)) := by rw [h]
        _ = n‚ÇÅ + (n‚ÇÇ + k).succ   := rfl
        _ = n‚ÇÅ + (n‚ÇÇ + k.succ)   := rfl

example (n‚ÇÅ n‚ÇÇ n‚ÇÉ: Nat): n‚ÇÅ + n‚ÇÇ + n‚ÇÉ = n‚ÇÅ + (n‚ÇÇ + n‚ÇÉ) :=
  Nat.recOn
    (motive := fun k => n‚ÇÅ + n‚ÇÇ + k = n‚ÇÅ + (n‚ÇÇ + k))
    n‚ÇÉ
    rfl
    (by simp_all [Nat.add_succ])

theorem Nat.succAdd (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ.succ + n‚ÇÇ = (n‚ÇÅ + n‚ÇÇ).succ :=
  Nat.recOn
    (motive := fun k => n‚ÇÅ.succ + k = (n‚ÇÅ + k).succ)
    n‚ÇÇ
    base
    induct
  where
    base := rfl
    induct (k: Nat) (h: n‚ÇÅ.succ + k = (n‚ÇÅ + k).succ) :=
      calc n‚ÇÅ.succ + k.succ
        _ = (n‚ÇÅ.succ + k).succ := rfl
        _ = (n‚ÇÅ + k).succ.succ := by rw [h]
        _ = (n‚ÇÅ + k.succ).succ := rfl

theorem Nat.addComm (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ + n‚ÇÇ = n‚ÇÇ + n‚ÇÅ :=
  Nat.recOn
    (motive := fun k => n‚ÇÅ + k = k + n‚ÇÅ)
    n‚ÇÇ
    base
    induct
  where
    base := by simp [Nat.add_zero, Nat.zero_add]
    induct (k: Nat) (h: n‚ÇÅ + k = k + n‚ÇÅ) :=
      calc n‚ÇÅ + k.succ
        _ = (n‚ÇÅ + k).succ := rfl
        _ = (k + n‚ÇÅ).succ := by rw [h]
        _ = k.succ + n‚ÇÅ   := Eq.symm (Nat.succAdd k n‚ÇÅ)

namespace Shortened
  theorem Nat.succAdd (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ.succ + n‚ÇÇ = (n‚ÇÅ + n‚ÇÇ).succ :=
    Nat.recOn
      (motive := fun k => n‚ÇÅ.succ + k = (n‚ÇÅ + k).succ)
      n‚ÇÇ
      rfl
      (by intro; simp_all [Nat.add_succ])

  theorem Nat.addComm (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ + n‚ÇÇ = n‚ÇÇ + n‚ÇÅ :=
    Nat.recOn
      (motive := fun k => n‚ÇÅ + k = k + n‚ÇÅ)
      n‚ÇÇ
      (by simp)
      (by intro; simp_all [Nat.add_succ, Nat.succ_add])
end Shortened

/-
## Other Recursive Data Types
-/

namespace Hidden
  inductive List (Œ±: Type): Type :=
    | nil: List Œ±
    | cons: Œ± ‚Üí List Œ± ‚Üí List Œ±

  def List.append: List Œ± ‚Üí List Œ± ‚Üí List Œ±
    | .nil, l => l
    | .cons hd tl, l => .cons hd (append tl l)

  instance: Append (List Œ±) where
    append := List.append

  theorem List.nilAppend (l: List Œ±): .nil ++ l = l := rfl
  theorem List.consAppend (x: Œ±) (l‚ÇÅ l‚ÇÇ: List Œ±): (.cons x l‚ÇÅ) ++ l‚ÇÇ = .cons x (l‚ÇÅ ++ l‚ÇÇ) := rfl

  theorem List.appendNil (l: List Œ±): l ++ .nil = l :=
    List.recOn
      (motive := fun k => k ++ .nil = k)
      l
      base
      recur
    where
      base := rfl
      recur (hd: Œ±) (tl: List Œ±) (h: tl ++ .nil = tl) :=
        calc List.cons hd tl ++ .nil
          _ = List.cons hd (tl ++ .nil) := List.consAppend hd tl .nil
          _ = List.cons hd tl := by rw [h]

  theorem List.appendAssoc (l‚ÇÅ l‚ÇÇ l‚ÇÉ: List Œ±): (l‚ÇÅ ++ l‚ÇÇ) ++ l‚ÇÉ = l‚ÇÅ ++ (l‚ÇÇ ++ l‚ÇÉ) :=
    List.recOn
      (motive := fun k => (k ++ l‚ÇÇ) ++ l‚ÇÉ = k ++ (l‚ÇÇ ++ l‚ÇÉ))
      l‚ÇÅ
      base
      recur
    where
      base :=
        calc (.nil ++ l‚ÇÇ) ++ l‚ÇÉ
          _ = l‚ÇÇ ++ l‚ÇÉ := by rw [List.nilAppend]
          _ = .nil ++ (l‚ÇÇ ++ l‚ÇÉ) := by rw [List.nilAppend]

      recur (hd: Œ±) (tl: List Œ±) (h: (tl ++ l‚ÇÇ) ++ l‚ÇÉ = tl ++ (l‚ÇÇ ++ l‚ÇÉ)) :=
        calc (.cons hd tl ++ l‚ÇÇ) ++ l‚ÇÉ
          _ = .cons hd (tl ++ l‚ÇÇ) ++ l‚ÇÉ   := by rw [List.consAppend]
          _ = .cons hd ((tl ++ l‚ÇÇ) ++ l‚ÇÉ) := by rw [List.consAppend]
          _ = .cons hd (tl ++ (l‚ÇÇ ++ l‚ÇÉ)) := by rw [h]
          _ = .cons hd tl ++ (l‚ÇÇ ++ l‚ÇÉ)   := by rw [‚Üê List.consAppend]

  example (l: List Œ±): l ++ .nil = l :=
    List.recOn
      (motive := fun k => k ++ .nil = k)
      l
      (by rfl)
      recur
    where
      recur (hd: Œ±) (tl: List Œ±) (h: tl ++ .nil = tl) := by
        simp [List.consAppend, h]

  example (l‚ÇÅ l‚ÇÇ l‚ÇÉ: List Œ±): (l‚ÇÅ ++ l‚ÇÇ) ++ l‚ÇÉ = l‚ÇÅ ++ (l‚ÇÇ ++ l‚ÇÉ) :=
    List.recOn
      (motive := fun k => (k ++ l‚ÇÇ) ++ l‚ÇÉ = k ++ (l‚ÇÇ ++ l‚ÇÉ))
      l‚ÇÅ
      (by simp [List.nilAppend])
      recur
    where
      recur (hd: Œ±) (tl: List Œ±) (h: (tl ++ l‚ÇÇ) ++ l‚ÇÉ = tl ++ (l‚ÇÇ ++ l‚ÇÉ)) := by
        simp [List.consAppend, h]

  example (l: List Œ±): l ++ .nil = l := by
    induction l with
      | nil => rfl
      | cons _ _ ih => simp [List.consAppend, ih]

  example (l‚ÇÅ l‚ÇÇ l‚ÇÉ: List Œ±): (l‚ÇÅ ++ l‚ÇÇ) ++ l‚ÇÉ = l‚ÇÅ ++ (l‚ÇÇ ++ l‚ÇÉ) := by
    induction l‚ÇÅ with
      | nil => simp [List.nilAppend]
      | cons _ _ ih => simp [List.consAppend, ih]

  def List.length: List Œ± ‚Üí _root_.Nat
    | .nil => 0
    | .cons _ tl => 1 + tl.length

  theorem List.appendLength (l‚ÇÅ l‚ÇÇ: List Œ±): (l‚ÇÅ ++ l‚ÇÇ).length = l‚ÇÅ.length + l‚ÇÇ.length :=
    List.recOn (motive := fun k => (k ++ l‚ÇÇ).length = k.length + l‚ÇÇ.length)
      l‚ÇÅ
      base
      recur
    where
      base :=
        calc (.nil ++ l‚ÇÇ).length
          _ = l‚ÇÇ.length := by rw [List.nilAppend]
          _ = 0 + l‚ÇÇ.length := by rw [Nat.zeroAdd]

      recur (hd: Œ±) (tl: List Œ±) (h: ((tl ++ l‚ÇÇ).length = tl.length + l‚ÇÇ.length)) :=
        calc (.cons hd tl ++ l‚ÇÇ).length
          _ = (List.cons hd (tl ++ l‚ÇÇ)).length := by rw [List.consAppend]
          _ = 1 + (tl ++ l‚ÇÇ).length := by rw [List.length]
          _ = 1 + (tl.length + l‚ÇÇ.length) := by rw [h]
          _ = (1 + tl.length) + l‚ÇÇ.length := Eq.symm (Nat.addAssoc 1 tl.length l‚ÇÇ.length)
          _ = (List.cons hd tl).length + l‚ÇÇ.length := rfl

  inductive BinaryTree: Type where
    | leaf: BinaryTree
    | node: BinaryTree ‚Üí BinaryTree ‚Üí BinaryTree

  inductive CountablyBranchingTree: Type where
    | leaf: CountablyBranchingTree
    | sup: (Nat ‚Üí CountablyBranchingTree) ‚Üí CountablyBranchingTree

  def CountablyBranchingTree.succ (t: CountablyBranchingTree): CountablyBranchingTree :=
    .sup (fun _ => t)

  def Nat.toCountablyBranchingTree: Nat ‚Üí CountablyBranchingTree
    | .zero => .leaf
    | .succ n => n.toCountablyBranchingTree.succ

  def omega: CountablyBranchingTree := .sup Nat.toCountablyBranchingTree
end Hidden

/-
## Tactics for Inductive Types
-/

example (p: Nat ‚Üí Prop) (hz: p 0) (hs: ‚àÄ n: Nat, p (Nat.succ n)): ‚àÄ n: Nat, p n := by
  intro
    | .zero => exact hz
    | .succ n => apply hs

example (n: Nat) (h: n ‚â† 0): n.pred.succ = n := by
  cases n with
    | zero => apply absurd rfl h
    | succ n => rfl

def tacticsExampleFun (n: Nat): Nat := by
  cases n with
    | zero => exact 3
    | succ n => exact 7

example: tacticsExampleFun 0 = 3 := rfl
example: tacticsExampleFun 42 = 7 := rfl

def Tuple (Œ±: Type) (n: Nat) :=
  { l: List Œ± // l.length = n }

def tacticsExampleFun2 {n: Nat} (t: Tuple Œ± n): Nat := by
  cases n with
    | zero => exact 3
    | succ n => exact 7

def myTuple: Tuple Nat 3 :=
  ‚ü®[0, 1, 2], rfl‚ü©

example: tacticsExampleFun2 myTuple = 7 := rfl

inductive Foo: Type where
  | bar1: Nat ‚Üí Nat ‚Üí Foo
  | bar2: Nat ‚Üí Nat ‚Üí Nat ‚Üí Foo

def silly (x: Foo): Nat := by
  cases x with
    | bar1 a b => exact b
    | bar2 c d e => exact e

example: Foo ‚Üí Nat
  | .bar1 _ b => b
  | .bar2 _ _ e => e

def silly2 (x: Foo): Nat := by
  cases x
  case bar2 c d e => exact e
  case bar1 a b => exact b

example (p: Nat ‚Üí Prop) (hz: p 0) (hs: ‚àÄ n: Nat, p (.succ n)) (m k: Nat): p (m + 3 * k) := by
  cases (m + 3 * k) with
    | zero => exact hz
    | succ n => apply hs

example (p: Nat ‚Üí Prop) (hz: p 0) (hs: ‚àÄ n: Nat, p (.succ n)) (m k: Nat): p (m + 3 * k) := by
  generalize m + 3 * k = n
  cases n with
    | zero => exact hz
    | succ n => apply hs

example (p: Prop) (m n: Nat) (h‚ÇÅ: m < n ‚Üí p) (h‚ÇÇ: m ‚â• n ‚Üí p): p := by
  cases Nat.lt_or_ge m n with
    | inl hlt => exact h‚ÇÅ hlt
    | inr hge => exact h‚ÇÇ hge

example (p: Prop) (m n: Nat) (h‚ÇÅ: m < n ‚Üí p) (h‚ÇÇ: m ‚â• n ‚Üí p): p :=
  match Nat.lt_or_ge m n with
    | .inl hlt => h‚ÇÅ hlt
    | .inr hge => h‚ÇÇ hge

#check Nat.sub_self

example (m n: Nat): m - n = 0 ‚à® m ‚â† n := by
  cases Decidable.em (m = n) with
    | inl hp =>
      rw [hp]
      apply Or.inl
      exact Nat.sub_self n
    | inr hnp =>
      apply Or.inr
      exact hnp

example (n: Nat): 0 + n = n := by
  induction n with
    | zero => rfl
    | succ n ih => rw [Nat.add_succ, ih]

example (n: Nat): 0 + n = n := by
  induction n <;> simp [*, Nat.add_zero, Nat.add_succ]

example (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ.succ + n‚ÇÇ = (n‚ÇÅ + n‚ÇÇ).succ := by
  induction n‚ÇÇ <;> simp [*, Nat.add_zero, Nat.add_succ]

example (n‚ÇÅ n‚ÇÇ: Nat): n‚ÇÅ + n‚ÇÇ = n‚ÇÇ + n‚ÇÅ := by
  induction n‚ÇÇ <;> simp [*, Nat.add_zero, Nat.zero_add, Nat.add_succ, Nat.succ_add]

example (n‚ÇÅ n‚ÇÇ n‚ÇÉ: Nat): (n‚ÇÅ + n‚ÇÇ) + n‚ÇÉ = n‚ÇÅ + (n‚ÇÇ + n‚ÇÉ) := by
  induction n‚ÇÉ <;> simp [*, Nat.add_zero, Nat.add_succ]

#check Nat.mod.inductionOn

example (x: Nat) {y: Nat} (h: y > 0): x % y < y := by
  induction x, y using Nat.mod.inductionOn with
    | ind x y h‚ÇÅ ih =>
      rw [Nat.mod_eq_sub_mod h‚ÇÅ.2]
      exact ih h
    | base x y h‚ÇÅ =>
      have: ¬¨ 0 < y ‚à® ¬¨ y ‚â§ x := Iff.mp (Decidable.not_and_iff_or_not ..) h‚ÇÅ
      match this with
        | .inl h‚ÇÅ => exact absurd h h‚ÇÅ
        | .inr h‚ÇÅ =>
          have hgt: y > x := Nat.gt_of_not_le h‚ÇÅ
          rw [‚ÜêNat.mod_eq_of_lt hgt] at hgt
          assumption

example: p ‚à® q ‚Üí q ‚à® p := by
  intro
    | .inl _ =>
      apply Or.inr
      assumption
    | .inr _ =>
      apply Or.inl
      assumption

example: s ‚àß q ‚àß r ‚Üí p ‚àß r ‚Üí q ‚àß p := by
  intro ‚ü®_, ‚ü®hq, _‚ü©‚ü© ‚ü®hp, _‚ü©
  exact ‚ü®hq, hp‚ü©

example: (fun (x y: Nat √ó Nat) => x.1 + y.2) = (fun (x z: Nat √ó Nat) => z.2 + x.1) := by
  funext (a, b) (_, d)
  show a + d = d + a
  rw [Nat.add_comm]

example (n‚ÇÅ n‚ÇÇ n‚ÇÉ: Nat) (h: n‚ÇÅ.succ.succ = n‚ÇÇ.succ.succ): n‚ÇÇ + n‚ÇÉ = n‚ÇÅ + n‚ÇÉ := by
  injection h with h‚ÇÅ
  injection h‚ÇÅ with h‚ÇÇ
  rw [h‚ÇÇ]

example (n‚ÇÅ n‚ÇÇ: Nat) (h: n‚ÇÅ.succ = 0): n = n + 7 := by
  injection h

example (n‚ÇÅ n‚ÇÇ: Nat) (h: n‚ÇÅ.succ = 0): n = n + 7 := by
  contradiction

example (h: 7 = 4): False := by
  contradiction

/-
## Inductive Families
-/

inductive Vector (Œ±: Type): Nat ‚Üí Type where
  | nil: Vector Œ± 0
  | cons: Œ± ‚Üí {n: Nat} ‚Üí Vector Œ± n ‚Üí Vector Œ± (n + 1)

namespace Hidden
  inductive Eq {Œ±: Sort u} (a: Œ±): Œ± ‚Üí Prop where
    | refl: Eq a a
end Hidden

universe u v
#check (@Eq.rec: {Œ±: Sort u} ‚Üí {a: Œ±} ‚Üí {motive: (x: Œ±) ‚Üí a = x ‚Üí Sort v} ‚Üí motive a rfl ‚Üí {b: Œ±} ‚Üí (h: a = b) ‚Üí motive b h)

example {Œ±: Type u} {a b: Œ±} {p: Œ± ‚Üí Prop} (h‚ÇÅ: Eq a b) (h‚ÇÇ: p a): p b :=
  Eq.rec (motive := fun x _ => p x) h‚ÇÇ h‚ÇÅ

theorem subst {Œ±: Type u} {a b: Œ±} {p: Œ± ‚Üí Prop} (h‚ÇÅ: Eq a b) (h‚ÇÇ: p a): p b :=
  match h‚ÇÅ with
    | Eq.refl _ => h‚ÇÇ

section
  set_option pp.all true
  #print subst
  #print subst.match_1
  #print Eq.casesOn
end

example {Œ±: Type u} {a b: Œ±} (h: Eq a b): Eq b a :=
  match h with
    | rfl => rfl

example {Œ±: Type u} {a b c: Œ±} (h‚ÇÅ: Eq a b) (h‚ÇÇ: Eq b c): Eq a c :=
  match h‚ÇÅ with
    | rfl =>
      match h‚ÇÇ with
        | rfl => rfl

example {Œ±: Type u} {a b: Œ±} (f: Œ± ‚Üí Œ≤) (h: Eq a b): Eq (f a) (f b) :=
  match h with
    | rfl => rfl

/-
## Axiomatic Details
-/

/-
## Mutual and Nested Inductive Types
-/

mutual
  inductive Even: Nat ‚Üí Prop where
    | zero: Even 0
    | succ: (n: Nat) ‚Üí Odd n ‚Üí Even (n + 1)
  inductive Odd: Nat ‚Üí Prop where
    | succ: (n: Nat) ‚Üí Even n ‚Üí Odd (n + 1)
end

mutual
  inductive Tree (Œ±: Type u) where
    | node: Œ± ‚Üí TreeList Œ± ‚Üí Tree Œ±
  inductive TreeList (Œ±: Type u) where
    | nil: TreeList Œ±
    | cons: Tree Œ± ‚Üí TreeList Œ± ‚Üí TreeList Œ±
end

inductive SimplerTree (Œ±: Type u) where
  | mk: Œ± ‚Üí List (SimplerTree Œ±) ‚Üí SimplerTree Œ±


/-
## Exercies
-/

section ExerciseOne
end ExerciseOne

section ExerciseTwo
end ExerciseTwo

section ExerciseThree
end ExerciseThree

section ExerciseFour
end ExerciseFour
