/-
# More on the Simply-Typed Lambda Calculus
-/

import SoftwareFoundations.LogicalFoundations.Maps
import SoftwareFoundations.ProgrammingLanguageFoundations.SmallStep

namespace SoftwareFoundations.ProgrammingLanguageFoundations.MoreStlc
  /-
  ## Simple Extensions to the STLC
  -/

  /- ### Numbers -/
  /- ### Let Bindings -/
  /- ### Pairs -/
  /- ### Unit -/
  /- ### Sums -/
  /- ### Lists -/
  /- ### General Recursion -/
  /- ### Records -/
  /- #### Encoding Records -/
  /- #### Variants -/

  /-
  ## Exercise: Formalizing the Extensions
  -/

  /-
  #### Syntaxs
  -/

  inductive Ty: Type where
    | unit: Ty
    | bool: Ty
    | nat: Ty
    | sum (l r: Ty): Ty
    | prod (l r: Ty): Ty
    | list (e: Ty): Ty
    | arrow (f x: Ty): Ty
  deriving Repr

  section
    declare_syntax_cat stlc_ty

    syntax:max "ùîπ" : stlc_ty
    syntax:max "‚Ñï" : stlc_ty
    syntax:max "‚Äπ" term "‚Ä∫" : stlc_ty

    syntax:50 "()" : stlc_ty
    syntax:50 stlc_ty:50 "√ó" stlc_ty:51 : stlc_ty
    syntax:50 stlc_ty:50 "+" stlc_ty:51 : stlc_ty
    syntax:50 "[" stlc_ty "]" : stlc_ty

    syntax:20 stlc_ty:21 "‚Üí" stlc_ty:20 : stlc_ty

    syntax "(" stlc_ty ")" : stlc_ty

    syntax "[Ty|" stlc_ty "]" : term

    macro_rules
      | `([Ty| ùîπ])          => `(Ty.bool)
      | `([Ty| ‚Ñï])          => `(Ty.nat)
      | `([Ty| ()])         => `(Ty.unit)
      | `([Ty| ‚Äπ$ty:term‚Ä∫]) => `($(Lean.quote ty))
      | `([Ty| $t‚ÇÅ √ó $t‚ÇÇ])  => `(Ty.prod [Ty| $t‚ÇÅ] [Ty| $t‚ÇÇ])
      | `([Ty| $t‚ÇÅ + $t‚ÇÇ])  => `(Ty.sum [Ty| $t‚ÇÅ] [Ty| $t‚ÇÇ])
      | `([Ty| [ $t ]])     => `(Ty.list [Ty| $t])
      | `([Ty| $t‚ÇÅ ‚Üí $t‚ÇÇ])  => `(Ty.arrow [Ty| $t‚ÇÅ] [Ty| $t‚ÇÇ])
      | `([Ty| ( $ty )])    => `([Ty| $ty])
  end

  section
    example: [Ty| ùîπ] = Ty.bool := rfl
    example: [Ty| ‚Ñï] = Ty.nat := rfl
    example: [Ty| ()] = Ty.unit := rfl
    example {t:Ty}: [Ty| ‚Äπt‚Ä∫] = t := rfl

    example: [Ty| ‚Ñï √ó ‚Ñï] = Ty.prod .nat .nat := rfl
    example: [Ty| ‚Ñï √ó ‚Ñï √ó ‚Ñï] = Ty.prod (.prod .nat .nat) .nat := rfl
    example: [Ty| ‚Ñï √ó (‚Ñï √ó ‚Ñï)] = Ty.prod .nat (.prod .nat .nat) := rfl

    example: [Ty| ‚Ñï + ‚Ñï] = Ty.sum .nat .nat := rfl
    example: [Ty| ‚Ñï + ‚Ñï + ‚Ñï] = Ty.sum (.sum .nat .nat) .nat := rfl
    example: [Ty| ‚Ñï + (‚Ñï + ‚Ñï)] = Ty.sum .nat (.sum .nat .nat) := rfl

    example: [Ty| ‚Ñï ‚Üí ‚Ñï] = Ty.arrow .nat .nat := rfl
    example: [Ty| ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï] = Ty.arrow .nat (.arrow .nat .nat) := rfl
    example: [Ty| (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï] = Ty.arrow (.arrow .nat .nat) .nat := rfl

    example: [Ty| [ùîπ]] = Ty.list .bool := rfl

    example: [Ty| ‚Ñï + ùîπ ‚Üí ‚Ñï √ó ùîπ ‚Üí [‚Ñï]] = Ty.arrow (.sum .nat .bool) (.arrow (.prod .nat .bool) (.list .nat)) := rfl
  end

  inductive Term: Type where
    | var (id: String): Term
    | abs (arg: String) (ty: Ty) (b: Term): Term
    | app (f x: Term): Term

    | true: Term
    | false: Term
    | and (t‚ÇÅ t‚ÇÇ: Term): Term
    | or (t‚ÇÅ t‚ÇÇ: Term): Term
    | not (t: Term): Term
    | bcase (c t f: Term): Term

    | const (n: Nat): Term
    | pred (t: Term): Term
    | succ (t: Term): Term
    | add (t‚ÇÅ t‚ÇÇ: Term): Term
    | sub (t‚ÇÅ t‚ÇÇ: Term): Term
    | mul (t‚ÇÅ t‚ÇÇ: Term): Term
    | div (t‚ÇÅ t‚ÇÇ: Term): Term
    | mod (t‚ÇÅ t‚ÇÇ: Term): Term
    | exp (t‚ÇÅ t‚ÇÇ: Term): Term

    | eq (t‚ÇÅ t‚ÇÇ: Term): Term
    | neq (t‚ÇÅ t‚ÇÇ: Term): Term
    | lt (t‚ÇÅ t‚ÇÇ: Term): Term
    | le (t‚ÇÅ t‚ÇÇ: Term): Term
    | gt (t‚ÇÅ t‚ÇÇ: Term): Term
    | ge (t‚ÇÅ t‚ÇÇ: Term): Term

    | ite (c t f: Term): Term

    | inl (t: Term) (ty: Ty): Term
    | inr (ty: Ty) (t: Term): Term
    | scase (s: Term) (p‚ÇÅ: String) (b‚ÇÅ: Term) (id‚ÇÇ: String) (b‚ÇÇ: Term): Term

    | nil: Term
    | cons (hd tl: Term): Term
    | lcase (l: Term) (b‚ÇÅ: Term) (hd tl: String) (b‚ÇÇ: Term): Term

    | unit: Term

    | pair (l r: Term): Term
    | fst (p: Term): Term
    | snd (p: Term): Term
    | pcase (p: Term) (id‚ÇÅ id‚ÇÇ: String) (b: Term): Term

    | let (id: String) (t‚ÇÅ t‚ÇÇ: Term): Term

    | fix (f: Term): Term
  deriving Repr

  @[reducible]
  def Term.ofBool: Bool ‚Üí Term
    | .true => .true
    | .false => .false

  section
    declare_syntax_cat stlc

    syntax "(" stlc ")" : stlc
    syntax:max "‚Äπ" term "‚Ä∫" : stlc

    syntax:max ident : stlc
    syntax:max "‚Äπid:" term "‚Ä∫" : stlc
    syntax:25 "Œª" ident ":" stlc_ty "." stlc : stlc
    syntax:25 "Œª" "‚Äπ" term "‚Ä∫" ":" stlc_ty "." stlc : stlc
    syntax:85 stlc:85 stlc:86 : stlc

    syntax:max "tru" : stlc
    syntax:max "fls" : stlc
    syntax:max "‚Äπbool:" term "‚Ä∫" : stlc
    syntax:35 stlc:35 "‚àß" stlc:36 : stlc
    syntax:30 stlc:30 "‚à®" stlc:31 : stlc
    syntax:max "¬¨" stlc:95 : stlc
    syntax "case" stlc "of" "|" "tru" "‚áí" stlc "|" "fls" "‚áí" stlc : stlc

    syntax:max num : stlc
    syntax:max "‚Äπnat:" term "‚Ä∫" : stlc
    syntax:85 "succ" stlc:84 : stlc
    syntax:85 "pred" stlc:84 : stlc
    syntax:65 stlc:65 "+" stlc:66 : stlc
    syntax:65 stlc:65 "-" stlc:66 : stlc
    syntax:70 stlc:70 "*" stlc:71 : stlc
    syntax:70 stlc:70 "/" stlc:71 : stlc
    syntax:70 stlc:70 "%" stlc:71 : stlc
    syntax:80 stlc:81 "^" stlc:80 : stlc

    syntax:50 stlc:50 "=" stlc:50 : stlc
    syntax:50 stlc:50 "‚â†" stlc:50 : stlc
    syntax:50 stlc:50 "‚â§" stlc:50 : stlc
    syntax:50 stlc:50 "<" stlc:50 : stlc
    syntax:50 stlc:50 "‚â•" stlc:50 : stlc
    syntax:50 stlc:50 ">" stlc:50 : stlc

    syntax "ite" stlc "then" stlc "else" stlc : stlc

    syntax "inl" "(" stlc "|" stlc_ty ")" : stlc
    syntax "inr" "(" stlc_ty "|" stlc ")" : stlc
    syntax "case" stlc "of" "|" "inl" ident "‚áí" stlc "|" "inr" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "inl" ident "‚áí" stlc "|" "inr" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "inl" "‚Äπ" term "‚Ä∫" "‚áí" stlc "|" "inr" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "inl" "‚Äπ" term "‚Ä∫" "‚áí" stlc "|" "inr" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc

    syntax:max "[]" : stlc
    syntax:65 stlc:66 "::" stlc:65 : stlc
    syntax "[" stlc,* "]" : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" ident "::" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" ident "::" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" "‚Äπ" term "‚Ä∫" "::" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" "‚Äπ" term "‚Ä∫" "::" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc

    syntax:max "()" : stlc

    syntax "(" stlc "," stlc ")" : stlc
    syntax:85 "fst" stlc:84 : stlc
    syntax:85 "snd" stlc:84 : stlc
    syntax "case" stlc "of" "|" "(" ident "," ident ")" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "(" ident "," "‚Äπ" term "‚Ä∫" ")" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "(" "‚Äπ" term "‚Ä∫" "," ident ")" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "(" "‚Äπ" term "‚Ä∫" "," "‚Äπ" term "‚Ä∫" ")" "‚áí" stlc : stlc

    syntax:20 "let" ident "=" stlc "in" stlc : stlc
    syntax:20 "let" "‚Äπ" term "‚Ä∫" "=" stlc "in" stlc : stlc

    syntax:60 "fix" stlc:60 : stlc

    syntax "[Term|" stlc "]" : term

    macro_rules
      | `([Term| ( $t )])                                                         => `([Term| $t])
      | `([Term| ‚Äπ $t:term ‚Ä∫])                                                    => `($(Lean.quote t))

      | `([Term| $id:ident])                                                      => `(Term.var $(Lean.quote (toString id.getId)))
      | `([Term| ‚Äπid: $id:term ‚Ä∫])                                                => `(Term.var $(Lean.quote id))
      | `([Term| Œª $id : $ty . $t])                                               => `(Term.abs $(Lean.quote (toString id.getId)) [Ty| $ty] [Term| $t])
      | `([Term| Œª ‚Äπ $id:term ‚Ä∫ : $ty . $t])                                      => `(Term.abs $(Lean.quote id) [Ty| $ty] [Term| $t])
      | `([Term| $t‚ÇÅ $t‚ÇÇ])                                                        => `(Term.app [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| tru])                                                            => `(Term.true)
      | `([Term| fls])                                                            => `(Term.false)
      | `([Term| ‚Äπbool: $b:term ‚Ä∫])                                               => `(Term.ofBool $(Lean.quote b))
      | `([Term| $t‚ÇÅ ‚àß $t‚ÇÇ])                                                      => `(Term.and [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚à® $t‚ÇÇ])                                                      => `(Term.or [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| ¬¨ $t])                                                           => `(Term.not [Term| $t])
      | `([Term| case $c of | tru ‚áí $t | fls ‚áí $f])                               => `(Term.bcase [Term| $c] [Term| $t] [Term| $f])

      | `([Term| $n:num])                                                         => `(Term.const $n)
      | `([Term| ‚Äπnat: $n:term ‚Ä∫])                                                => `(Term.const $(Lean.quote n))
      | `([Term| succ $t])                                                        => `(Term.succ [Term| $t])
      | `([Term| pred $t])                                                        => `(Term.pred [Term| $t])
      | `([Term| $t‚ÇÅ + $t‚ÇÇ])                                                      => `(Term.add [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ - $t‚ÇÇ])                                                      => `(Term.sub [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ * $t‚ÇÇ])                                                      => `(Term.mul [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ / $t‚ÇÇ])                                                      => `(Term.div [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ % $t‚ÇÇ])                                                      => `(Term.mod [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ^ $t‚ÇÇ])                                                      => `(Term.exp [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| $t‚ÇÅ = $t‚ÇÇ])                                                      => `(Term.eq [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚â† $t‚ÇÇ])                                                      => `(Term.neq [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ < $t‚ÇÇ])                                                      => `(Term.lt [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚â§ $t‚ÇÇ])                                                      => `(Term.le [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ > $t‚ÇÇ])                                                      => `(Term.gt [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚â• $t‚ÇÇ])                                                      => `(Term.ge [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| ite $c then $t else $f])                                         => `(Term.ite [Term| $c] [Term| $t] [Term| $f])

      | `([Term| inl ( $t | $ty )])                                               => `(Term.inl [Term| $t] [Ty| $ty])
      | `([Term| inr ( $ty | $t )])                                               => `(Term.inr [Ty| $ty] [Term| $t])
      | `([Term| case $s of | inl $id‚ÇÅ ‚áí $t‚ÇÅ | inr $id‚ÇÇ ‚áí $t‚ÇÇ])                   => `(Term.scase [Term| $s] $(Lean.quote (toString (id‚ÇÅ).getId)) [Term| $t‚ÇÅ] $(Lean.quote (toString (id‚ÇÇ).getId)) [Term| $t‚ÇÇ])
      | `([Term| case $s of | inl $id‚ÇÅ ‚áí $t‚ÇÅ | inr ‚Äπ $id‚ÇÇ:term ‚Ä∫ ‚áí $t‚ÇÇ])          => `(Term.scase [Term| $s] $(Lean.quote (toString (id‚ÇÅ).getId)) [Term| $t‚ÇÅ] $(Lean.quote id‚ÇÇ) [Term| $t‚ÇÇ])
      | `([Term| case $s of | inl ‚Äπ $id‚ÇÅ:term ‚Ä∫ ‚áí $t‚ÇÅ | inr $id‚ÇÇ ‚áí $t‚ÇÇ])          => `(Term.scase [Term| $s] $(Lean.quote id‚ÇÅ) [Term| $t‚ÇÅ] $(Lean.quote (toString (id‚ÇÇ).getId)) [Term| $t‚ÇÇ])
      | `([Term| case $s of | inl ‚Äπ $id‚ÇÅ:term ‚Ä∫ ‚áí $t‚ÇÅ | inr ‚Äπ $id‚ÇÇ:term ‚Ä∫ ‚áí $t‚ÇÇ]) => `(Term.scase [Term| $s] $(Lean.quote id‚ÇÅ) [Term| $t‚ÇÅ] $(Lean.quote id‚ÇÇ) [Term| $t‚ÇÇ])

      | `([Term| $hd :: $tl])                                                     => `(Term.cons [Term| $hd] [Term| $tl])
      | `([Term| [] ])                                                            => `(Term.nil)
      | `([Term| [ $hd ] ])                                                       => `(Term.cons [Term| $hd] .nil)
      | `([Term| [ $hd , $tl:stlc,* ] ])                                          => `(Term.cons [Term| $hd] [Term| [ $tl,* ]])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | $hd :: $tl ‚áí $t‚ÇÇ])                      => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote (toString hd.getId)) $(Lean.quote (toString tl.getId)) [Term| $t‚ÇÇ])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | $hd :: ‚Äπ $tl ‚Ä∫ ‚áí $t‚ÇÇ])                  => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote (toString hd.getId)) $(Lean.quote tl) [Term| $t‚ÇÇ])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | ‚Äπ $hd ‚Ä∫ :: $tl ‚áí $t‚ÇÇ])                  => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote hd) $(Lean.quote (toString tl.getId)) [Term| $t‚ÇÇ])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | ‚Äπ $hd ‚Ä∫ :: ‚Äπ $tl ‚Ä∫ ‚áí $t‚ÇÇ])              => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote hd) $(Lean.quote tl) [Term| $t‚ÇÇ])

      | `([Term| () ])                                                            => `(Term.unit)

      | `([Term| ( $t‚ÇÅ , $t‚ÇÇ )])                                                  => `(Term.pair [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| fst $t])                                                         => `(Term.fst [Term| $t])
      | `([Term| snd $t])                                                         => `(Term.snd [Term| $t])
      | `([Term| case $p of | ( $f , $s ) ‚áí $t])                                  => `(Term.pcase [Term| $p] $(Lean.quote (toString f.getId)) $(Lean.quote (toString s.getId)) [Term| $t])
      | `([Term| case $p of | ( $f , ‚Äπ $s ‚Ä∫ ) ‚áí $t])                              => `(Term.pcase [Term| $p] $(Lean.quote (toString f.getId)) $(Lean.quote s) [Term| $t])
      | `([Term| case $p of | ( ‚Äπ $f ‚Ä∫ , $s ) ‚áí $t])                              => `(Term.pcase [Term| $p] $(Lean.quote f) $(Lean.quote (toString s.getId)) [Term| $t])
      | `([Term| case $p of | ( ‚Äπ $f ‚Ä∫ , ‚Äπ $s ‚Ä∫ ) ‚áí $t])                          => `(Term.pcase [Term| $p] $(Lean.quote f) $(Lean.quote s) [Term| $t])

      | `([Term| let $id = $t‚ÇÅ in $t‚ÇÇ])                                           => `(Term.let $(Lean.quote (toString id.getId)) [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| let ‚Äπ $id:term ‚Ä∫ = $t‚ÇÅ in $t‚ÇÇ])                                  => `(Term.let $(Lean.quote id) [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| fix $t])                                                         => `(Term.fix [Term| $t])
  end

  section
    variable {id id‚ÇÅ id‚ÇÇ: String}
    variable {n: Nat}
    variable {b: Bool}
    variable {c c‚ÇÅ c‚ÇÇ t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ t‚ÇÖ t‚ÇÜ t‚Çá f f‚ÇÅ f‚ÇÇ: Term}
    variable {ty ty‚ÇÅ ty‚ÇÇ: Ty}

    example: [Term| ‚Äπt‚Ä∫] = t := rfl
    example: [Term| (‚Äπt‚Ä∫)] = t := rfl

    example: [Term| foo] = Term.var "foo" := rfl
    example: [Term| ‚Äπid:id‚Ä∫] = Term.var id := rfl
    example: [Term| Œª x: ùîπ. y] = Term.abs "x" .bool (.var "y") := rfl
    example: [Term| Œª ‚Äπid‚Ä∫: ùîπ. y] = Term.abs id .bool (.var "y") := rfl
    example: [Term| Œª f: ‚Ñï ‚Üí ‚Ñï. Œª x: ‚Ñï. f x] = Term.abs "f" (.arrow .nat .nat) (.abs "x" .nat (.app (.var "f") (.var "x"))) := rfl
    example: [Term| f x] = Term.app (.var "f") (.var "x") := rfl
    example: [Term| f x y z] = Term.app (.app (.app (.var "f") (.var "x")) (.var "y")) (.var "z") := rfl

    example: [Term| tru] = Term.true := rfl
    example: [Term| fls] = Term.false := rfl
    example: [Term| ‚Äπbool:true‚Ä∫] = Term.true := rfl
    example: [Term| ‚Äπbool:false‚Ä∫] = Term.false := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫] = Term.and t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫] = Term.and (.and t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß (‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫)] = Term.and t‚ÇÅ (.and t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫] = Term.or t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫] = Term.or (.or t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® (‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫)] = Term.or t‚ÇÅ (.or t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫ ‚àß ‚Äπt‚ÇÑ‚Ä∫] = Term.or (.and t‚ÇÅ t‚ÇÇ) (.and t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ¬¨ ‚Äπt‚Ä∫] = Term.not t := rfl
    example: [Term| ¬¨ ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫] = Term.and (.not t‚ÇÅ) t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ¬¨ ‚Äπt‚ÇÇ‚Ä∫] = Term.or t‚ÇÅ (.not t‚ÇÇ) := rfl
    example: [Term| case ‚Äπc‚Ä∫ of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫] = Term.bcase c t f := rfl

    example: [Term| 42] = Term.const 42 := rfl
    example: [Term| ‚Äπnat:n‚Ä∫] = Term.const n := rfl
    example: [Term| succ ‚Äπt‚Ä∫] = Term.succ t := rfl
    example: [Term| succ succ ‚Äπt‚Ä∫] = Term.succ (.succ t) := rfl
    example: [Term| pred ‚Äπt‚Ä∫] = Term.pred t := rfl
    example: [Term| pred pred ‚Äπt‚Ä∫] = Term.pred (.pred t) := rfl
    example: [Term| pred succ ‚Äπt‚Ä∫] = Term.pred (.succ t) := rfl
    example: [Term| succ pred ‚Äπt‚Ä∫] = Term.succ (.pred t) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫] = Term.add t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫] = Term.add (.add t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + (‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫)] = Term.add t‚ÇÅ (.add t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ + succ ‚Äπt‚ÇÇ‚Ä∫] = Term.add (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ + pred ‚Äπt‚ÇÇ‚Ä∫] = Term.add (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ + pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.add (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫] = Term.sub t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫] = Term.sub (.sub t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - (‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫)] = Term.sub t‚ÇÅ (.sub t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ - succ ‚Äπt‚ÇÇ‚Ä∫] = Term.sub (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ - pred ‚Äπt‚ÇÇ‚Ä∫] = Term.sub (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ - pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.sub (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫] = Term.mul t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫] = Term.mul (.mul t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * (‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫)] = Term.mul t‚ÇÅ (.mul t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ * succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mul (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ * pred ‚Äπt‚ÇÇ‚Ä∫] = Term.mul (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ * pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mul (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫] = Term.div t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫] = Term.div (.div t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / (‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫)] = Term.div t‚ÇÅ (.div t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ / succ ‚Äπt‚ÇÇ‚Ä∫] = Term.div (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ / pred ‚Äπt‚ÇÇ‚Ä∫] = Term.div (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ / pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.div (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÇ‚Ä∫] = Term.mod t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫] = Term.mod (.mod t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ % (‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫)] = Term.mod t‚ÇÅ (.mod t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ % succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mod (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ % pred ‚Äπt‚ÇÇ‚Ä∫] = Term.mod (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ % pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mod (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫] = Term.exp t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫ ^ ‚Äπt‚ÇÉ‚Ä∫] = Term.exp t‚ÇÅ (.exp t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| (‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫) ^ ‚Äπt‚ÇÉ‚Ä∫] = Term.exp (.exp t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ ^ succ ‚Äπt‚ÇÇ‚Ä∫] = Term.exp (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ ^ pred ‚Äπt‚ÇÇ‚Ä∫] = Term.exp (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ ^ pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.exp (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫] = Term.add t‚ÇÅ (.sub t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫] = Term.sub t‚ÇÅ (.add t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫] = Term.mul t‚ÇÅ (.div t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫] = Term.div t‚ÇÅ (.mul t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫] = Term.mul t‚ÇÅ (.div t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫ * ‚Äπt‚ÇÑ‚Ä∫] = Term.add (.mul t‚ÇÅ t‚ÇÇ) (.mul t‚ÇÉ t‚ÇÑ) := rfl
    -- example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ * succ ‚Äπt‚ÇÇ‚Ä∫ + f ‚Äπt‚ÇÉ‚Ä∫ / ‚Äπt‚ÇÑ‚Ä∫ - ‚Äπt‚ÇÖ‚Ä∫ % ‚Äπt‚ÇÜ‚Ä∫ ^ ‚Äπt‚Çá‚Ä∫] =
    --   Term.add
    --     (.mul
    --       (.pred t‚ÇÅ)
    --       (.succ t‚ÇÇ))
    --     (Term.sub
    --       (.div
    --         (.app (.var "f") t‚ÇÉ)
    --         t‚ÇÑ)
    --       (.mod
    --         t‚ÇÖ
    --         (.exp t‚ÇÜ t‚Çá))) := rfl
    -- Term.sub
    --   (Term.add
    --     (Term.mul
    --       (Term.pred t‚ÇÅ)
    --       (Term.succ t‚ÇÇ))
    --     (Term.div
    --       (Term.app (Term.var "f") t‚ÇÉ)
    --       t‚ÇÑ))
    --   (Term.mod
    --     t‚ÇÖ
    --     (Term.exp t‚ÇÜ t‚Çá))

    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫] = Term.eq t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â† ‚Äπt‚ÇÇ‚Ä∫] = Term.neq t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ < ‚Äπt‚ÇÇ‚Ä∫] = Term.lt t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â§ ‚Äπt‚ÇÇ‚Ä∫] = Term.le t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ > ‚Äπt‚ÇÇ‚Ä∫] = Term.gt t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â• ‚Äπt‚ÇÇ‚Ä∫] = Term.ge t‚ÇÅ t‚ÇÇ := rfl

    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ = ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.eq (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ ‚â† ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.neq (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ < ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.lt (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ ‚â§ ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.le (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ > ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.gt (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ ‚â• ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.ge (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl

    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.and (.eq t‚ÇÅ t‚ÇÇ) (.neq t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.or (.eq t‚ÇÅ t‚ÇÇ) (.neq t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ¬¨‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.and (.eq (.not t‚ÇÅ) t‚ÇÇ) (.neq t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ¬¨(‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫) ‚àß ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.and (.not (.eq t‚ÇÅ t‚ÇÇ)) (.neq t‚ÇÉ t‚ÇÑ) := rfl

    example: [Term| ite ‚Äπc‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] = Term.ite c t f := rfl
    example: [Term| ite ‚Äπc‚Ä∫ ‚Äπt‚ÇÅ‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫ then ‚Äπt‚Ä∫ ‚Äπt‚ÇÉ‚Ä∫ ‚Äπt‚ÇÑ‚Ä∫ else ‚Äπf‚Ä∫ ‚Äπt‚ÇÖ‚Ä∫ ‚Äπt‚ÇÜ‚Ä∫] = Term.ite (.app (.app c t‚ÇÅ) t‚ÇÇ) (.app (.app t t‚ÇÉ) t‚ÇÑ) (.app (.app f t‚ÇÖ) t‚ÇÜ) := rfl
    example: [Term| ite ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ then ‚Äπt‚ÇÉ‚Ä∫ ‚à® ‚Äπt‚ÇÑ‚Ä∫ else ‚Äπt‚ÇÖ‚Ä∫ ‚â† ‚Äπt‚ÇÜ‚Ä∫] = Term.ite (.and t‚ÇÅ t‚ÇÇ) (.or t‚ÇÉ t‚ÇÑ) (.neq t‚ÇÖ t‚ÇÜ) := rfl

    example: [Term| inl (42 | ‚Ñï)] = Term.inl (.const 42) .nat := rfl
    example: [Term| inr (ùîπ | tru)] = Term.inr .bool .true := rfl
    example: [Term| inl (1 + 2 | ‚Ñï) ‚àß inr (ùîπ | ¬¨ tru)] = Term.and (.inl (.add (.const 1) (.const 2)) .nat) (.inr .bool (.not .true)) := rfl
    example: [Term| inl (1 + 2 | ‚Ñï) ‚â† inr (ùîπ | ¬¨ tru)] = Term.neq (.inl (.add (.const 1) (.const 2)) .nat) (.inr .bool (.not .true)) := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl x ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr y ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ "x" t‚ÇÇ "y" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr y ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ id‚ÇÅ t‚ÇÇ "y" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl x ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ "x" t‚ÇÇ id‚ÇÇ t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ id‚ÇÅ t‚ÇÇ id‚ÇÇ t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫ * ‚Äπt‚ÇÑ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÖ‚Ä∫ ‚à® ‚Äπt‚ÇÜ‚Ä∫] = Term.scase t‚ÇÅ id‚ÇÅ (.and t‚ÇÇ (.mul t‚ÇÉ t‚ÇÑ)) id‚ÇÇ (.or t‚ÇÖ t‚ÇÜ) := rfl

    example: [Term| []] = Term.nil := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫] = Term.cons t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÉ‚Ä∫] = Term.cons t‚ÇÅ (.cons t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| (‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫) :: ‚Äπt‚ÇÉ‚Ä∫] = Term.cons (.cons t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫]] = Term.cons t‚ÇÅ .nil := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫]] = Term.cons t‚ÇÅ (.cons t‚ÇÇ .nil) := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫, ‚Äπt‚ÇÉ‚Ä∫]] = Term.cons t‚ÇÅ (.cons t‚ÇÇ (.cons t‚ÇÉ .nil)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ :: []] = Term.cons t‚ÇÅ .nil := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫, ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫]] = Term.cons (.and t‚ÇÅ t‚ÇÇ) (.cons (.exp t‚ÇÉ t‚ÇÑ) .nil) := rfl
    example: [Term| (‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫) :: ‚Äπt‚ÇÑ‚Ä∫] = Term.cons (.and t‚ÇÅ t‚ÇÇ) t‚ÇÑ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÑ‚Ä∫] = Term.cons (.mul t‚ÇÅ t‚ÇÇ) t‚ÇÑ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÑ‚Ä∫] = Term.cons (.app t‚ÇÅ t‚ÇÇ) t‚ÇÑ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | hd::tl ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ "hd" "tl" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | hd::‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ "hd" id‚ÇÇ t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫::tl ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ id‚ÇÅ "tl" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫::‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ id‚ÇÅ id‚ÇÇ t‚ÇÉ := rfl

    example: [Term| ()] = Term.unit := rfl

    example: [Term| (tru, 42)] = Term.pair .true (.const 42) := rfl
    example: [Term| fst ‚Äπt‚ÇÅ‚Ä∫] = Term.fst t‚ÇÅ := rfl
    example: [Term| snd ‚Äπt‚ÇÅ‚Ä∫] = Term.snd t‚ÇÅ := rfl
    example: [Term| fst snd ‚Äπt‚ÇÅ‚Ä∫] = Term.fst (.snd t‚ÇÅ) := rfl
    example: [Term| fst ‚Äπt‚ÇÅ‚Ä∫ ^ snd ‚Äπt‚ÇÅ‚Ä∫] = Term.exp (.fst t‚ÇÅ) (.snd t‚ÇÅ) := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (f, s) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ "f" "s" t‚ÇÇ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (f, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ "f" id‚ÇÇ t‚ÇÇ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, s) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ id‚ÇÅ "s" t‚ÇÇ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ id‚ÇÅ id‚ÇÇ t‚ÇÇ := rfl

    example: [Term| let x = ‚Äπt‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÇ‚Ä∫] = Term.let "x" t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| let x = ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫ in ‚Äπt‚ÇÉ‚Ä∫] = Term.let "x" (.or t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| let ‚Äπid‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÇ‚Ä∫] = Term.let id‚ÇÅ t‚ÇÅ t‚ÇÇ := rfl

    example: [Term| fix ‚Äπt‚ÇÅ‚Ä∫] = Term.fix t‚ÇÅ := rfl
    example: [Term| fix (Œª ‚Äπid‚ÇÅ‚Ä∫: ‚Ñï. ‚Äπt‚ÇÅ‚Ä∫)] = Term.fix (.abs id‚ÇÅ .nat t‚ÇÅ) := rfl
  end

  /-
  #### Substitution
  -/

  @[reducible]
  def Term.subst (id: String) (s: Term): Term ‚Üí Term
    | .var v     => if id = v then s else .var v
    | .abs v t b => if id = v then .abs v t b else .abs v t (subst id s b)
    | .app f x   => .app (subst id s f) (subst id s x)

    | .true        => .true
    | .false       => .false
    | .and t‚ÇÅ t‚ÇÇ   => .and (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .or t‚ÇÅ t‚ÇÇ    => .or (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .not t       => .not (subst id s t)
    | .bcase c t f => .bcase (subst id s c) (subst id s t) (subst id s f)

    | .const n   => .const n
    | .pred t    => .pred (subst id s t)
    | .succ t    => .succ (subst id s t)
    | .add t‚ÇÅ t‚ÇÇ => .add (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .sub t‚ÇÅ t‚ÇÇ => .sub (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .mul t‚ÇÅ t‚ÇÇ => .mul (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .div t‚ÇÅ t‚ÇÇ => .div (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .mod t‚ÇÅ t‚ÇÇ => .mod (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .exp t‚ÇÅ t‚ÇÇ => .exp (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)

    | .eq t‚ÇÅ t‚ÇÇ  => .eq (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .neq t‚ÇÅ t‚ÇÇ => .neq (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .lt t‚ÇÅ t‚ÇÇ  => .lt (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .le t‚ÇÅ t‚ÇÇ  => .le (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .gt t‚ÇÅ t‚ÇÇ  => .gt (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)
    | .ge t‚ÇÅ t‚ÇÇ  => .ge (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)

    | .ite c t f => .ite (subst id s c) (subst id s t) (subst id s f)

    | .inl t ty              => .inl (subst id s t) ty
    | .inr ty t              => .inr ty (subst id s t)
    | .scase c id‚ÇÅ b‚ÇÅ id‚ÇÇ b‚ÇÇ =>
      let b‚ÇÅ := if id‚ÇÅ = id then b‚ÇÅ else subst id s b‚ÇÅ
      let b‚ÇÇ := if id‚ÇÇ = id then b‚ÇÇ else subst id s b‚ÇÇ
      .scase (subst id s c) id‚ÇÅ b‚ÇÅ id‚ÇÇ b‚ÇÇ

    | .nil                 => .nil
    | .cons hd tl          => .cons (subst id s hd) (subst id s tl)
    | .lcase l b‚ÇÅ hd tl b‚ÇÇ =>
      let b‚ÇÇ := if id = hd ‚à® id = tl then b‚ÇÇ else subst id s b‚ÇÇ
      .lcase (subst id s l) (subst id s b‚ÇÅ) hd tl b‚ÇÇ

    | .unit => .unit

    | .pair l r          => .pair (subst id s l) (subst id s r)
    | .fst p             => .fst (subst id s p)
    | .snd p             => .snd (subst id s p)
    | .pcase p id‚ÇÅ id‚ÇÇ b =>
      let b := if id = id‚ÇÅ ‚à® id = id‚ÇÇ then b else subst id s b
      .pcase p id‚ÇÅ id‚ÇÇ b

    | .let v t‚ÇÅ t‚ÇÇ =>
      if id = v
      then .let v t‚ÇÅ t‚ÇÇ
      else .let v (subst id s t‚ÇÅ) (subst id s t‚ÇÇ)

    | .fix f => .fix (subst id s f)

  scoped notation "[" id "‚Ü¶" s "]" t => Term.subst id s t

  section
    example: (["z" ‚Ü¶ (.const 0)] [Term| (Œª x: ùîπ. z)]) = [Term| Œª x: ùîπ. 0] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| (Œª z: ùîπ. z)]) = [Term| Œª z: ùîπ. z] := rfl

    example: (["z" ‚Ü¶ (.const 0)] [Term| case tru of | tru ‚áí z | fls ‚áí z]) = [Term| case tru of | tru ‚áí 0 | fls ‚áí 0] := rfl

    example: (["z" ‚Ü¶ (.const 0)] [Term| case x of | inl l ‚áí z | inr r ‚áí z]) = [Term| case x of | inl l ‚áí 0 | inr r ‚áí 0] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case x of | inl l ‚áí z | inr z ‚áí z]) = [Term| case x of | inl l ‚áí 0 | inr z ‚áí z] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case x of | inl z ‚áí z | inr r ‚áí z]) = [Term| case x of | inl z ‚áí z | inr r ‚áí 0] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case x of | inl z ‚áí z | inr z ‚áí z]) = [Term| case x of | inl z ‚áí z | inr z ‚áí z] := rfl

    example: (["z" ‚Ü¶ (.const 0)] [Term| case [] of | nil ‚áí z | hd::tl ‚áí z]) = [Term| case [] of | nil ‚áí 0 | hd::tl ‚áí 0] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case [] of | nil ‚áí z | hd::z ‚áí z]) = [Term| case [] of | nil ‚áí 0 | hd::z ‚áí z] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case [] of | nil ‚áí z | z::tl ‚áí z]) = [Term| case [] of | nil ‚áí 0 | z::tl ‚áí z] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case [] of | nil ‚áí z | z::z ‚áí z]) = [Term| case [] of | nil ‚áí 0 | z::z ‚áí z] := rfl

    example: (["z" ‚Ü¶ (.const 0)] [Term| case (x, y) of | (l, r) ‚áí z]) = [Term| case (x, y) of | (l, r) ‚áí 0] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case (x, y) of | (l, z) ‚áí z]) = [Term| case (x, y) of | (l, z) ‚áí z] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case (x, y) of | (z, r) ‚áí z]) = [Term| case (x, y) of | (z, r) ‚áí z] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| case (x, y) of | (z, z) ‚áí z]) = [Term| case (x, y) of | (z, z) ‚áí z] := rfl

    example: (["z" ‚Ü¶ (.const 0)] [Term| let w = z in z]) = [Term| let w = 0 in 0] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| let w = z in w]) = [Term| let w = 0 in w] := rfl
    example: (["z" ‚Ü¶ (.const 0)] [Term| let y = succ 0 in z]) = [Term| let y = succ 0 in 0] := rfl
  end

  inductive Subst (id: String) (s: Term): Term ‚Üí Term ‚Üí Prop where

  namespace Term
    theorem Subst.correct {id: String} {s t‚ÇÅ t‚ÇÇ: Term}: ([id ‚Ü¶ s] t‚ÇÅ) = t‚ÇÇ ‚Üî Subst id s t‚ÇÅ t‚ÇÇ := sorry
  end Term

  namespace Tactic
    theorem Subst.correct {id: String} {s t‚ÇÅ t‚ÇÇ: Term}: ([id ‚Ü¶ s] t‚ÇÅ) = t‚ÇÇ ‚Üî Subst id s t‚ÇÅ t‚ÇÇ := by sorry
  end Tactic

  namespace Blended
    theorem Subst.correct {id: String} {s t‚ÇÅ t‚ÇÇ: Term}: ([id ‚Ü¶ s] t‚ÇÅ) = t‚ÇÇ ‚Üî Subst id s t‚ÇÅ t‚ÇÇ := sorry
  end Blended

  /-
  #### Reduction
  -/

  inductive Value: Term ‚Üí Prop where
    | true: Value [Term| tru]
    | false: Value [Term| fls]
    | const {n: Nat}: Value [Term| ‚Äπnat:n‚Ä∫]
    | abs {id: String} {ty: Ty} {b: Term}: Value [Term| Œª ‚Äπid‚Ä∫: ‚Äπty‚Ä∫. ‚Äπb‚Ä∫]
    | inl {ty: Ty} {t: Term} (h‚ÇÅ: Value t): Value [Term| inl (‚Äπt‚Ä∫ | ‚Äπty‚Ä∫)]
    | inr {ty: Ty} {t: Term} (h‚ÇÅ: Value t): Value [Term| inr (‚Äπty‚Ä∫ | ‚Äπt‚Ä∫)]
    | nil: Value [Term| []]
    | cons {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ): Value [Term| ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫]
    | unit: Value [Term| ()]
    | pair {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ): Value [Term| (‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫)]

  inductive Eq: Term ‚Üí Term ‚Üí Prop where
    | true: Eq [Term| tru] [Term| tru]
    | false: Eq [Term| fls] [Term| fls]
    | const {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ = n‚ÇÇ): Eq [Term| ‚Äπnat:n‚ÇÅ‚Ä∫] [Term| ‚Äπnat:n‚ÇÇ‚Ä∫]
    | inl {t‚ÇÅ t‚ÇÇ: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ) (h‚ÇÉ: Eq t‚ÇÅ t‚ÇÇ) (h‚ÇÑ: ty‚ÇÅ = ty‚ÇÇ): Eq [Term| inl (‚Äπt‚ÇÅ‚Ä∫ | ‚Äπty‚ÇÅ‚Ä∫)] [Term| inl (‚Äπt‚ÇÇ‚Ä∫ | ‚Äπty‚ÇÇ‚Ä∫)]
    | inr {t‚ÇÅ t‚ÇÇ: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ) (h‚ÇÉ: Eq t‚ÇÅ t‚ÇÇ) (h‚ÇÑ: ty‚ÇÅ = ty‚ÇÇ): Eq [Term| inr (‚Äπty‚ÇÅ‚Ä∫ | ‚Äπt‚ÇÅ‚Ä∫)] [Term| inr (‚Äπty‚ÇÇ‚Ä∫ | ‚Äπt‚ÇÇ‚Ä∫)]
    | nil: Eq [Term| []] [Term| []]
    | cons {hd‚ÇÅ hd‚ÇÇ tl‚ÇÅ tl‚ÇÇ: Term} (h‚ÇÅ: Value hd‚ÇÅ) (h‚ÇÇ: Value hd‚ÇÇ) (h‚ÇÉ: Value tl‚ÇÅ) (h‚ÇÑ: Value tl‚ÇÇ) (h‚ÇÖ: Eq hd‚ÇÅ hd‚ÇÇ) (h‚ÇÜ: Eq tl‚ÇÅ tl‚ÇÇ): Eq [Term| ‚Äπhd‚ÇÅ‚Ä∫ :: ‚Äπtl‚ÇÅ‚Ä∫] [Term| ‚Äπhd‚ÇÇ‚Ä∫ :: ‚Äπtl‚ÇÇ‚Ä∫]
    | unit: Eq [Term| ()] [Term| ()]
    | pair {f‚ÇÅ f‚ÇÇ s‚ÇÅ s‚ÇÇ: Term} (h‚ÇÅ: Value f‚ÇÅ) (h‚ÇÇ: Value f‚ÇÇ) (h‚ÇÉ: Value s‚ÇÅ) (h‚ÇÑ: Value s‚ÇÇ) (h‚ÇÖ: Eq f‚ÇÅ f‚ÇÇ) (h‚ÇÜ: Eq s‚ÇÅ s‚ÇÇ): Eq [Term| (‚Äπf‚ÇÅ‚Ä∫, ‚Äπs‚ÇÅ‚Ä∫)] [Term| (‚Äπf‚ÇÇ‚Ä∫, ‚Äπs‚ÇÇ‚Ä∫)]

  inductive Eval‚ÇÅ: Term ‚Üí Term ‚Üí Prop where
    | appL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ‚Äπt‚ÇÉ‚Ä∫]
    | appR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫]
    | appAbs {id: String} {t: Ty} {b x: Term} (h‚ÇÅ: Value x): Eval‚ÇÅ [Term| (Œª ‚Äπid‚Ä∫: ‚Äπty‚Ä∫. ‚Äπb‚Ä∫) ‚Äπx‚Ä∫] ([id ‚Ü¶ x] [Term| ‚Äπb‚Ä∫])

    | andL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫]
    | andR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫]
    | andTrueTrue: Eval‚ÇÅ [Term| tru ‚àß tru] [Term| tru]
    | andTrueFalse: Eval‚ÇÅ [Term| tru ‚àß fls] [Term| fls]
    | andFalseTrue: Eval‚ÇÅ [Term| fls ‚àß tru] [Term| fls]
    | andFalseFalse: Eval‚ÇÅ [Term| fls ‚àß fls] [Term| fls]
    | orL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫]
    | orR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫]
    | orTrueTrue: Eval‚ÇÅ [Term| tru ‚àß tru] [Term| tru]
    | orTrueFalse: Eval‚ÇÅ [Term| tru ‚àß fls] [Term| tru]
    | orFalseTrue: Eval‚ÇÅ [Term| fls ‚àß tru] [Term| tru]
    | orFalseFalse: Eval‚ÇÅ [Term| fls ‚àß fls] [Term| fls]
    | notStep {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ¬¨ ‚Äπt‚ÇÅ‚Ä∫] [Term| ¬¨ ‚Äπt‚ÇÇ‚Ä∫]
    | notTrue: Eval‚ÇÅ [Term| ¬¨ tru] [Term| fls]
    | notFalse: Eval‚ÇÅ [Term| ¬¨ fls] [Term| tru]
    | bcaseTrue {t f: Term}: Eval‚ÇÅ [Term| case tru of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫] [Term| ‚Äπt‚Ä∫]
    | bcaseFalse {t f: Term}: Eval‚ÇÅ [Term| case fls of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫] [Term| ‚Äπf‚Ä∫]
    | bcase {c‚ÇÅ c‚ÇÇ t f: Term} (h‚ÇÅ: Eval‚ÇÅ c‚ÇÅ c‚ÇÇ): Eval‚ÇÅ [Term| case ‚Äπc‚ÇÅ‚Ä∫ of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫] [Term| case ‚Äπc‚ÇÇ‚Ä∫ of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫]

    | succConst {n: Nat}: Eval‚ÇÅ [Term| succ ‚Äπnat:n‚Ä∫] [Term| ‚Äπnat:n + 1‚Ä∫]
    | succ {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| succ ‚Äπt‚ÇÅ‚Ä∫] [Term| succ ‚Äπt‚ÇÇ‚Ä∫]
    | predZero: Eval‚ÇÅ [Term| pred 0] [Term| 0]
    | predSucc {v: Term} (h‚ÇÅ: Value v): Eval‚ÇÅ [Term| pred succ ‚Äπv‚Ä∫] [Term| ‚Äπv‚Ä∫]
    | pred {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| pred ‚Äπt‚ÇÅ‚Ä∫] [Term| pred ‚Äπt‚ÇÇ‚Ä∫]
    | addL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫]
    | addR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫]
    | add {n‚ÇÅ n‚ÇÇ: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ + ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| ‚Äπnat:n‚ÇÅ + n‚ÇÇ‚Ä∫]
    | subL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫]
    | subR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫]
    | sub {n‚ÇÅ n‚ÇÇ: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ - ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| ‚Äπnat:n‚ÇÅ - n‚ÇÇ‚Ä∫]
    | mulL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫]
    | mulR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫]
    | mul {n‚ÇÅ n‚ÇÇ: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ * ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| ‚Äπnat:n‚ÇÅ * n‚ÇÇ‚Ä∫]
    | divL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫]
    | divR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫]
    | div {n‚ÇÅ n‚ÇÇ: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ / ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| ‚Äπnat:n‚ÇÅ / n‚ÇÇ‚Ä∫]
    | modL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫]
    | modR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÇ‚Ä∫]
    | mod {n‚ÇÅ n‚ÇÇ: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ % ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| ‚Äπnat:n‚ÇÅ % n‚ÇÇ‚Ä∫]
    | expL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ^ ‚Äπt‚ÇÉ‚Ä∫]
    | expR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫]
    | exp {n‚ÇÅ n‚ÇÇ: Nat}: Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ ^ ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| ‚Äπnat:n‚ÇÅ ^ n‚ÇÇ‚Ä∫]

    | eqL {t‚ÇÅ t‚ÇÉ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ = ‚Äπt‚ÇÉ‚Ä∫]
    | eqR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫]
    | eqTrue {v‚ÇÅ v‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Value v‚ÇÇ) (h‚ÇÉ: Eq v‚ÇÅ v‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ = ‚Äπv‚ÇÇ‚Ä∫] [Term| tru]
    | eqFalse {v‚ÇÅ v‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Value v‚ÇÇ) (h‚ÇÉ: ¬¨ Eq v‚ÇÅ v‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ = ‚Äπv‚ÇÇ‚Ä∫] [Term| fls]
    | neqL {t‚ÇÅ t‚ÇÉ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â† ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ‚â† ‚Äπt‚ÇÉ‚Ä∫]
    | neqR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â† ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â† ‚Äπt‚ÇÇ‚Ä∫]
    | neqTrue {v‚ÇÅ v‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Value v‚ÇÇ) (h‚ÇÉ: ¬¨ Eq v‚ÇÅ v‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â† ‚Äπv‚ÇÇ‚Ä∫] [Term| tru]
    | neqFalse {v‚ÇÅ v‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Value v‚ÇÇ) (h‚ÇÉ: Eq v‚ÇÅ v‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â† ‚Äπv‚ÇÇ‚Ä∫] [Term| fls]
    | ltL {t‚ÇÅ t‚ÇÉ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ < ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ < ‚Äπt‚ÇÉ‚Ä∫]
    | ltR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ < ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ < ‚Äπt‚ÇÇ‚Ä∫]
    | ltTrue {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ < n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ < ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| tru]
    | ltFalse {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ ‚â• n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ < ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| fls]
    | leL {t‚ÇÅ t‚ÇÉ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â§ ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ‚â§ ‚Äπt‚ÇÉ‚Ä∫]
    | leR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â§ ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â§ ‚Äπt‚ÇÇ‚Ä∫]
    | leTrue {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ ‚â§ n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ ‚â§ ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| tru]
    | leFalse {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ > n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ ‚â§ ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| fls]
    | gtL {t‚ÇÅ t‚ÇÉ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ > ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ > ‚Äπt‚ÇÉ‚Ä∫]
    | gtR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ > ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ > ‚Äπt‚ÇÇ‚Ä∫]
    | gtTrue {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ > n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ > ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| tru]
    | gtFalse {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ ‚â§ n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ > ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| fls]
    | geL {t‚ÇÅ t‚ÇÉ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â• ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ ‚â• ‚Äπt‚ÇÉ‚Ä∫]
    | geR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â• ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ ‚â• ‚Äπt‚ÇÇ‚Ä∫]
    | geTrue {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ ‚â• n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ ‚â• ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| tru]
    | geFalse {n‚ÇÅ n‚ÇÇ: Nat} (h‚ÇÅ: n‚ÇÅ < n‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπnat:n‚ÇÅ‚Ä∫ ‚â• ‚Äπnat:n‚ÇÇ‚Ä∫] [Term| fls]

    | iteTrue {t f: Term}: Eval‚ÇÅ [Term| ite tru then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ‚Äπt‚Ä∫]
    | iteFalse {t f: Term}: Eval‚ÇÅ [Term| ite fls then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ‚Äπf‚Ä∫]
    | ite {c‚ÇÅ c‚ÇÇ t f: Term} (h‚ÇÅ: Eval‚ÇÅ c‚ÇÅ c‚ÇÇ): Eval‚ÇÅ [Term| ite ‚Äπc‚ÇÅ‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] [Term| ite ‚Äπc‚ÇÇ‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫]

    | inl {t‚ÇÅ t‚ÇÇ: Term} {ty: Ty} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| inl (‚Äπt‚ÇÅ‚Ä∫ | ‚Äπty‚Ä∫)] [Term| inl (‚Äπt‚ÇÇ‚Ä∫ | ‚Äπty‚Ä∫)]
    | inr {t‚ÇÅ t‚ÇÇ: Term} {ty: Ty} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| inr (‚Äπty‚Ä∫ | ‚Äπt‚ÇÅ‚Ä∫)] [Term| inr (‚Äπty‚Ä∫ | ‚Äπt‚ÇÇ‚Ä∫)]
    | scaseInl {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Value t‚ÇÅ): Eval‚ÇÅ [Term| case inl (‚Äπt‚ÇÅ‚Ä∫ | ‚Äπty‚Ä∫) of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] ([id‚ÇÅ ‚Ü¶ t‚ÇÅ] [Term| ‚Äπt‚ÇÅ‚Ä∫])
    | scaseInr {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Value t‚ÇÅ): Eval‚ÇÅ [Term| case inr (‚Äπty‚Ä∫ | ‚Äπt‚ÇÅ‚Ä∫) of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] ([id‚ÇÇ ‚Ü¶ t‚ÇÇ] [Term| ‚Äπt‚ÇÇ‚Ä∫])
    | scase {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÑ‚Ä∫] [Term| case ‚Äπt‚ÇÇ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÑ‚Ä∫]

    | consL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÉ‚Ä∫] [Term| ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÉ‚Ä∫]
    | consR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| ‚Äπv‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÅ‚Ä∫] [Term| ‚Äπv‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫]
    | lcaseNil {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ: Term}: Eval‚ÇÅ [Term| case [] of | nil ‚áí ‚Äπt‚ÇÅ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫ :: ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫] [Term| ‚Äπt‚ÇÅ‚Ä∫]
    | lcaseCons {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ: Term} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ): Eval‚ÇÅ [Term| case ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÉ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫ :: ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÑ‚Ä∫] ([id‚ÇÅ ‚Ü¶ t‚ÇÅ] [id‚ÇÇ ‚Ü¶ t‚ÇÇ] [Term| ‚Äπt‚ÇÑ‚Ä∫])
    | lcase {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÉ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫ :: ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÑ‚Ä∫] [Term| case ‚Äπt‚ÇÇ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÉ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫ :: ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÑ‚Ä∫]

    | pairL {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| (‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÉ‚Ä∫)] [Term| (‚Äπt‚ÇÇ‚Ä∫, ‚Äπt‚ÇÉ‚Ä∫)]
    | pairR {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| (‚Äπv‚ÇÅ‚Ä∫, ‚Äπt‚ÇÅ‚Ä∫)] [Term| (‚Äπv‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫)]
    | fst {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ): Eval‚ÇÅ [Term| fst (‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫)] [Term| ‚Äπt‚ÇÅ‚Ä∫]
    | snd {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ): Eval‚ÇÅ [Term| snd (‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫)] [Term| ‚Äπt‚ÇÇ‚Ä∫]
    | pcaseVal {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Value t‚ÇÅ) (h‚ÇÇ: Value t‚ÇÇ): Eval‚ÇÅ [Term| case (‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫) of | (‚Äπid‚ÇÅ‚Ä∫, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÉ‚Ä∫] ([id‚ÇÅ ‚Ü¶ t‚ÇÅ] [id‚ÇÇ ‚Ü¶ t‚ÇÇ] [Term| ‚Äπt‚ÇÉ‚Ä∫])
    | pcase {id‚ÇÅ id‚ÇÇ: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÉ‚Ä∫] [Term| case ‚Äπt‚ÇÇ‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÉ‚Ä∫]

    | letL {id: String} {t‚ÇÅ t‚ÇÇ t‚ÇÉ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| let ‚Äπid‚Ä∫ = ‚Äπt‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÉ‚Ä∫] [Term| let ‚Äπid‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ in ‚Äπt‚ÇÉ‚Ä∫]
    | letR {id: String} {v‚ÇÅ t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Value v‚ÇÅ) (h‚ÇÇ: Eval‚ÇÅ ([id ‚Ü¶ v‚ÇÅ] t‚ÇÅ) t‚ÇÇ): Eval‚ÇÅ [Term| let ‚Äπid‚Ä∫ = ‚Äπv‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÅ‚Ä∫] [Term| let ‚Äπid‚Ä∫ = ‚Äπv‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÇ‚Ä∫]

    | fix {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: Eval‚ÇÅ t‚ÇÅ t‚ÇÇ): Eval‚ÇÅ [Term| fix ‚Äπt‚ÇÅ‚Ä∫] [Term| fix ‚Äπt‚ÇÇ‚Ä∫]
    | fixAbs {id: String} {ty: Ty} {b: Term}: Eval‚ÇÅ [Term| fix (Œª ‚Äπid‚Ä∫: ‚Äπty‚Ä∫. ‚Äπb‚Ä∫)] ([id ‚Ü¶ [Term| fix (Œª ‚Äπid‚Ä∫: ‚Äπty‚Ä∫. ‚Äπb‚Ä∫)]] [Term| ‚Äπb‚Ä∫])

  scoped infix:50 "‚ü∂" => Eval‚ÇÅ
  scoped infix:50 "‚áì"  => SmallStep.MultiStep Eval‚ÇÅ

  /-
  #### Typing
  -/

  open SoftwareFoundations.LogicalFoundations.Maps

  def Context: Type := PartialMap Ty
  def Context.empty: Context := PartialMap.empty

  notation "‚óè" => Context.empty
  notation Œì ";" id ":" ty => PartialMap.update Œì id ty

  inductive HasType: Context ‚Üí Term ‚Üí Ty ‚Üí Prop where
    | var {Œì: Context} {id: String} {ty: Ty} (h‚ÇÅ: Œì id = .some ty): HasType Œì [Term| ‚Äπid:id‚Ä∫] [Ty| ‚Äπty‚Ä∫]
    | abs {Œì: Context} {id: String} {ty‚ÇÅ ty‚ÇÇ: Ty} {b: Term} (h‚ÇÅ: HasType (Œì; id: ty‚ÇÅ) b ty‚ÇÇ): HasType Œì [Term| Œª ‚Äπid‚Ä∫: ‚Äπty‚ÇÅ‚Ä∫. ‚Äπb‚Ä∫] [Ty| ‚Äπty‚ÇÅ‚Ä∫ ‚Üí ‚Äπty‚ÇÇ‚Ä∫]
    | app {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Äπty‚ÇÅ‚Ä∫ ‚Üí ‚Äπty‚ÇÇ‚Ä∫]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Äπty‚ÇÅ‚Ä∫]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Äπty‚ÇÇ‚Ä∫]

    | true {Œì: Context}: HasType Œì [Term| tru] [Ty| ùîπ]
    | false {Œì: Context}: HasType Œì [Term| fls] [Ty| ùîπ]
    | and {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ùîπ]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ùîπ]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫] [Ty| ùîπ]
    | or {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ùîπ]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ùîπ]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫] [Ty| ùîπ]
    | not {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t [Ty| ùîπ]): HasType Œì [Term| ¬¨ ‚Äπt‚Ä∫] [Ty| ùîπ]
    | bcase {Œì: Context} {c t f: Term} {ty: Ty} (h‚ÇÅ: HasType Œì c [Ty| ùîπ]) (h‚ÇÇ: HasType Œì t ty) (h‚ÇÉ: HasType Œì f ty): HasType Œì [Term| case ‚Äπc‚Ä∫ of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫] [Ty| ‚Äπty‚Ä∫]

    | const {Œì: Context} {n: Nat}: HasType Œì [Term| ‚Äπnat:n‚Ä∫] [Ty| ‚Ñï]
    | succ {Œì: Context} {t: Term} (h‚ÇÅ: HasType Œì t [Ty| ‚Ñï]): HasType Œì [Term| succ ‚Äπt‚Ä∫] [Ty| ‚Ñï]
    | pred {Œì: Context} {t: Term} (h‚ÇÅ: HasType Œì t [Ty| ‚Ñï]): HasType Œì [Term| pred ‚Äπt‚Ä∫] [Ty| ‚Ñï]
    | add {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | sub {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | mul {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | div {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | mod {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | exp {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]

    | eq {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} {ty: Ty} (h‚ÇÅ: HasType Œì t‚ÇÅ ty) (h‚ÇÇ: HasType Œì t‚ÇÇ ty): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Äπty‚Ä∫]
    | neq {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} {ty: Ty} (h‚ÇÅ: HasType Œì t‚ÇÅ ty) (h‚ÇÇ: HasType Œì t‚ÇÇ ty): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â† ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Äπty‚Ä∫]
    | lt {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ < ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | le {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â§ ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | gt {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ > ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]
    | ge {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} (h‚ÇÅ: HasType Œì t‚ÇÅ [Ty| ‚Ñï]) (h‚ÇÇ: HasType Œì t‚ÇÇ [Ty| ‚Ñï]): HasType Œì [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â• ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Ñï]

    | inl {Œì: Context} {t: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t ty‚ÇÅ): HasType Œì [Term| inl (‚Äπt‚Ä∫ | ‚Äπty‚ÇÇ‚Ä∫)] [Ty| ‚Äπty‚ÇÅ‚Ä∫ + ‚Äπty‚ÇÇ‚Ä∫]
    | inr {Œì: Context} {t: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t ty‚ÇÇ): HasType Œì [Term| inr (‚Äπty‚ÇÅ‚Ä∫ | ‚Äπt‚Ä∫)] [Ty| ‚Äπty‚ÇÅ‚Ä∫ + ‚Äπty‚ÇÇ‚Ä∫]
    | scase {Œì: Context} {c l r: Term} {id‚ÇÅ id‚ÇÇ: String} {ty‚ÇÅ ty‚ÇÇ ty‚ÇÉ: Ty} (h‚ÇÅ: HasType Œì c [Ty| ‚Äπty‚ÇÅ‚Ä∫ + ‚Äπty‚ÇÇ‚Ä∫]) (h‚ÇÅ: HasType (Œì; id‚ÇÅ: ty‚ÇÅ) l ty‚ÇÉ) (h‚ÇÇ: HasType (Œì; id‚ÇÇ: ty‚ÇÇ) r ty‚ÇÉ): HasType Œì [Term| case ‚Äπc‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] [Ty| ‚Äπty‚ÇÉ‚Ä∫]

    | nil {Œì: Context} {ty: Ty} (h‚ÇÅ: HasType Œì [Term| []] ty): HasType Œì [Term| []] [Ty| [‚Äπty‚Ä∫]]
    | cons {Œì: Context} {hd tl: Term} {ty: Ty} (h‚ÇÅ: HasType Œì hd ty) (h‚ÇÇ: HasType Œì tl [Ty| [‚Äπty‚Ä∫]]): HasType Œì [Term| ‚Äπhd‚Ä∫ :: ‚Äπtl‚Ä∫] [Ty| [‚Äπty‚Ä∫]]

    | unit {Œì: Context}: HasType Œì [Term| ()] [Ty| ()]

    | pair {Œì: Context} {t‚ÇÅ t‚ÇÇ: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t‚ÇÅ ty‚ÇÅ) (h‚ÇÇ: HasType Œì t‚ÇÇ ty‚ÇÇ): HasType Œì [Term| (‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫)] [Ty| ‚Äπty‚ÇÅ‚Ä∫ √ó ‚Äπty‚ÇÇ‚Ä∫]
    | fst {Œì: Context} {t: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t [Ty| ‚Äπty‚ÇÅ‚Ä∫ √ó ‚Äπty‚ÇÇ‚Ä∫]): HasType Œì [Term| fst ‚Äπt‚Ä∫] [Ty| ‚Äπty‚ÇÅ‚Ä∫]
    | snd {Œì: Context} {t: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t [Ty| ‚Äπty‚ÇÅ‚Ä∫ √ó ‚Äπty‚ÇÇ‚Ä∫]): HasType Œì [Term| snd ‚Äπt‚Ä∫] [Ty| ‚Äπty‚ÇÇ‚Ä∫]
    | pcase {Œì: Context} {c b: Term} {id‚ÇÅ id‚ÇÇ: String} {ty‚ÇÅ ty‚ÇÇ ty‚ÇÉ: Ty} (h‚ÇÅ: HasType Œì c [Ty| ‚Äπty‚ÇÅ‚Ä∫ √ó ‚Äπty‚ÇÇ‚Ä∫]) (h‚ÇÇ: HasType ((Œì; id‚ÇÅ: ty‚ÇÅ); id‚ÇÇ: ty‚ÇÇ) b ty‚ÇÉ): HasType Œì [Term| case ‚Äπc‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπb‚Ä∫] [Ty| ‚Äπt‚ÇÉ‚Ä∫]

    | let {Œì: Context} {id: String} {t‚ÇÅ t‚ÇÇ: Term} {ty‚ÇÅ ty‚ÇÇ: Ty} (h‚ÇÅ: HasType Œì t‚ÇÅ ty‚ÇÅ) (h‚ÇÇ: HasType (Œì; id: ty‚ÇÅ) t‚ÇÇ ty‚ÇÇ): HasType Œì [Term| let ‚Äπid‚Ä∫ = ‚Äπt‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÇ‚Ä∫] [Ty| ‚Äπty‚ÇÇ‚Ä∫]

    | fix {Œì: Context} {t: Term} {ty: Ty} (h‚ÇÅ: HasType Œì t [Ty| ‚Äπty‚Ä∫ ‚Üí ‚Äπty‚Ä∫]): HasType Œì [Term| fix ‚Äπt‚Ä∫] [Ty| ‚Äπty‚Ä∫]

  scoped notation ctx "‚ä¢" t ":" ty => HasType ctx t ty

  /-
  ### Examples
  -/

  /-
  #### Preliminaries
  -/

  /-
  #### Numbers
  -/

  namespace NumTest
    def testTerm := [Term|
      ite (pred succ pred (2 * 0) = 0)
      then 5
      else 6
    ]

    namespace Term
      example: ‚óè ‚ä¢ testTerm: [Ty| ‚Ñï] := sorry
      example: testTerm ‚áì [Term| 5] := sorry
    end Term

    namespace Tactic
    end Tactic

    namespace Blended
    end Blended
  end NumTest

  /-
  #### Products
  -/

  namespace ProdTest
    def testTerm := [Term|
      snd fst ((5, 6), 7)
    ]

    namespace Term
      example: ‚óè ‚ä¢ testTerm: [Ty| ‚Ñï] := sorry
      example: testTerm ‚áì [Term| 6] := sorry
    end Term

    namespace Tactic
    end Tactic

    namespace Blended
    end Blended
  end ProdTest

  /-
  #### Let
  -/

  namespace LetTest
    def testTerm‚ÇÅ := [Term|
      let x = pred 6 in
      succ x
    ]

    def testTerm‚ÇÇ := [Term|
      let z = pred 6 in
      succ z
    ]

    namespace Term
      example: ‚óè ‚ä¢ testTerm‚ÇÅ: [Ty| ‚Ñï] := sorry
      example: testTerm‚ÇÅ ‚áì [Term| 6] := sorry

      example: ‚óè ‚ä¢ testTerm‚ÇÇ: [Ty| ‚Ñï] := sorry
      example: testTerm‚ÇÇ ‚áì [Term| 6] := sorry
    end Term

    namespace Tactic
    end Tactic

    namespace Blended
    end Blended
  end LetTest

  /-
  #### Sums
  -/

  namespace SumTest
    def testTerm‚ÇÅ := [Term|
      case inl (5 | ‚Ñï) of
        | inl x ‚áí x
        | inr y ‚áí r
    ]

    def testTerm‚ÇÇ := [Term|
      let processSum = Œª x: ‚Ñï + ‚Ñï.
        case x of
          | inl n ‚áí n
          | inr n ‚áí ite n = 0 then 1 else 0
      in
      (processSum (inl (5 | ‚Ñï)), processSum (inr (‚Ñï | 5)))
    ]

    namespace Term
      example: ‚óè ‚ä¢ testTerm‚ÇÅ: [Ty| ‚Ñï] := sorry
      example: testTerm‚ÇÅ ‚áì [Term| 5] := sorry

      example: ‚óè ‚ä¢ testTerm‚ÇÇ: [Ty| ‚Ñï √ó ‚Ñï] := sorry
      example: testTerm‚ÇÇ ‚áì [Term| (5, 0)] := sorry
    end Term

    namespace Tactic
    end Tactic

    namespace Blended
    end Blended
  end SumTest

  /-
  #### Lists
  -/

  namespace ListTest
    def testTerm := [Term|
      let l = [5, 6] in
      case l of
        | nil ‚áí 0
        | hd :: tl ‚áí hd * hd
    ]

    namespace Term
      example: ‚óè ‚ä¢ testTerm: [Ty| ‚Ñï] := sorry
      example: testTerm ‚áì [Term| 25] := sorry
    end Term

    namespace Tactic
    end Tactic

    namespace Blended
    end Blended
  end ListTest

  /-
  #### Fix
  -/

  namespace FixTest
    def fact := [Term|
      fix (Œª f: ‚Ñï ‚Üí ‚Ñï. Œª a: ‚Ñï.
        ite (a = 0)
        then 1
        else a * (f (pred a))
      )
    ]

    def map := [Term|
      Œª g: ‚Ñï ‚Üí ‚Ñï.
        fix (Œª f: [‚Ñï] ‚Üí [‚Ñï]. Œª l: [‚Ñï].
          case l of
            | nil ‚áí []
            | hd :: tl ‚áí g hd :: f tl)
    ]

    def equal := [Term|
      fix (Œª eq: ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ. Œª m: ‚Ñï. Œª n: ‚Ñï.
        ite m = 0
        then ite n = 0
             then tru
             else fls
        else ite n = 0
             then fls
             else eq (pred m) (pred n))
    ]

    def evenOdd := [Term|
      let evenOdd = fix (Œª evenOdd: ((‚Ñï ‚Üí ‚Ñï) √ó (‚Ñï ‚Üí ‚Ñï)).
        ((Œª n: ‚Ñï. ite n = 0 then tru else (snd evenOdd) (pred n)),
         (Œª n: ‚Ñï. ite n = 0 then fls else (fst evenOdd) (pred n)))
      ) in
      let even = fst evenOdd in
      let odd = snd evenOdd in
      (even 3, even 4)
    ]

    namespace Term
      example: ‚óè ‚ä¢ fact: [Ty| ‚Ñï ‚Üí ‚Ñï] := sorry
      example: [Term| ‚Äπfact‚Ä∫ 4] ‚áì [Term| 24] := sorry

      example: ‚óè ‚ä¢ map: [Ty| (‚Ñï ‚Üí ‚Ñï) ‚Üí ([‚Ñï] ‚Üí [‚Ñï])] := sorry
      example: [Term| ‚Äπmap‚Ä∫ (Œª x: ‚Ñï. succ x) [1, 2]] ‚áì [Term| 24] := sorry

      example: ‚óè ‚ä¢ equal: [Ty| ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ] := sorry
      example: [Term| ‚Äπequal‚Ä∫ 4 4] ‚áì [Term| tru] := sorry
      example: [Term| ‚Äπequal‚Ä∫ 4 5] ‚áì [Term| fls] := sorry

      example: ‚óè ‚ä¢ evenOdd: [Ty| ùîπ √ó ùîπ] := sorry
      example: evenOdd ‚áì [Term| (fls, tru)] := sorry
    end Term

    namespace Tactic
    end Tactic

    namespace Blended
    end Blended
  end FixTest

  /-
  ### Properties of Typing
  -/

  /-
  #### Progress
  -/

  namespace Term
    theorem HasType.progress {t‚ÇÅ: Term} {ty: Ty}: (‚óè ‚ä¢ t‚ÇÅ : ty) ‚Üí Value t ‚à® ‚àÉ t‚ÇÇ: Term, t‚ÇÅ ‚ü∂ t‚ÇÇ := sorry
  end Term

  namespace Tactic
  end Tactic

  namespace Blended
  end Blended

  /-
  #### Weakening
  -/

  namespace Term
    theorem Context.weakening {Œì‚ÇÅ Œì‚ÇÇ: Context} {t: Term} {ty: Ty}: Œì‚ÇÅ.includedIn Œì‚ÇÇ ‚Üí (Œì‚ÇÅ ‚ä¢ t : ty) ‚Üí Œì‚ÇÇ ‚ä¢ t : ty := sorry
    theorem Context.weakening.empty {Œì: Context} {t: Term} {ty: Ty}: (‚óè ‚ä¢ t : ty) ‚Üí Œì ‚ä¢ t : ty := sorry
  end Term

  namespace Tactic
  end Tactic

  namespace Blended
  end Blended

  /-
  #### Substitution
  -/

  namespace Term
    theorem Term.subst.preservation {Œì: Context} {id: String} {t‚ÇÅ t‚ÇÇ: Term} {ty‚ÇÅ ty‚ÇÇ: Ty}: (Œì.update id ty‚ÇÅ ‚ä¢ t‚ÇÅ : ty‚ÇÇ) ‚Üí (‚óè ‚ä¢ t‚ÇÇ : ty‚ÇÅ) ‚Üí Œì ‚ä¢ (Term.subst id t‚ÇÇ t‚ÇÅ) : ty‚ÇÇ := sorry
  end Term

  namespace Tactic
  end Tactic

  namespace Blended
  end Blended

  /-
  #### Preservation
  -/

  namespace Term
    theorem HasType.preservation {t‚ÇÅ t‚ÇÇ: Term} {ty: Ty}: (‚óè ‚ä¢ t‚ÇÅ : ty) ‚Üí (t‚ÇÅ ‚ü∂ t‚ÇÇ) ‚Üí (‚óè ‚ä¢ t‚ÇÇ : ty) := sorry
  end Term

  namespace Tactic
  end Tactic

  namespace Blended
  end Blended
end SoftwareFoundations.ProgrammingLanguageFoundations.MoreStlc
