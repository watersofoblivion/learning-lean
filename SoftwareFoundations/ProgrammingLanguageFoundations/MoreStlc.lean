/-
# More on the Simply-Typed Lambda Calculus
-/

namespace SoftwareFoundations.ProgrammingLanguageFoundations.MoreStlc
  /-
  ## Simple Extensions to the STLC
  -/

  /- ### Numbers -/
  /- ### Let Bindings -/
  /- ### Pairs -/
  /- ### Unit -/
  /- ### Sums -/
  /- ### Lists -/
  /- ### General Recursion -/
  /- ### Records -/
  /- #### Encoding Records -/
  /- #### Variants -/

  /-
  ## Exercise: Formalizing the Extensions
  -/

  inductive Ty: Type where
    | unit: Ty
    | bool: Ty
    | nat: Ty
    | sum (l r: Ty): Ty
    | prod (l r: Ty): Ty
    | list (e: Ty): Ty
    | arrow (f x: Ty): Ty
  deriving Repr

  section
    declare_syntax_cat stlc_ty

    syntax:max "ùîπ" : stlc_ty
    syntax:max "‚Ñï" : stlc_ty
    syntax:max "‚Äπ" term "‚Ä∫" : stlc_ty

    syntax:50 stlc_ty:50 "√ó" stlc_ty:51 : stlc_ty
    syntax:50 stlc_ty:50 "+" stlc_ty:51 : stlc_ty
    syntax:50 "[" stlc_ty "]" : stlc_ty

    syntax:20 stlc_ty:21 "‚Üí" stlc_ty:20 : stlc_ty

    syntax "(" stlc_ty ")" : stlc_ty

    syntax "[Ty|" stlc_ty "]" : term

    macro_rules
      | `([Ty| ùîπ])          => `(Ty.bool)
      | `([Ty| ‚Ñï])          => `(Ty.nat)
      | `([Ty| ‚Äπ$ty:term‚Ä∫]) => `($(Lean.quote ty))
      | `([Ty| $t‚ÇÅ √ó $t‚ÇÇ])  => `(Ty.prod [Ty| $t‚ÇÅ] [Ty| $t‚ÇÇ])
      | `([Ty| $t‚ÇÅ + $t‚ÇÇ])  => `(Ty.sum [Ty| $t‚ÇÅ] [Ty| $t‚ÇÇ])
      | `([Ty| [ $t ]])     => `(Ty.list [Ty| $t])
      | `([Ty| $t‚ÇÅ ‚Üí $t‚ÇÇ])  => `(Ty.arrow [Ty| $t‚ÇÅ] [Ty| $t‚ÇÇ])
      | `([Ty| ( $ty )])    => `([Ty| $ty])
  end

  section
    example: [Ty| ùîπ] = Ty.bool := rfl
    example: [Ty| ‚Ñï] = Ty.nat := rfl
    example {t:Ty}: [Ty| ‚Äπt‚Ä∫] = t := rfl

    example: [Ty| ‚Ñï √ó ‚Ñï] = Ty.prod .nat .nat := rfl
    example: [Ty| ‚Ñï √ó ‚Ñï √ó ‚Ñï] = Ty.prod (.prod .nat .nat) .nat := rfl
    example: [Ty| ‚Ñï √ó (‚Ñï √ó ‚Ñï)] = Ty.prod .nat (.prod .nat .nat) := rfl

    example: [Ty| ‚Ñï + ‚Ñï] = Ty.sum .nat .nat := rfl
    example: [Ty| ‚Ñï + ‚Ñï + ‚Ñï] = Ty.sum (.sum .nat .nat) .nat := rfl
    example: [Ty| ‚Ñï + (‚Ñï + ‚Ñï)] = Ty.sum .nat (.sum .nat .nat) := rfl

    example: [Ty| ‚Ñï ‚Üí ‚Ñï] = Ty.arrow .nat .nat := rfl
    example: [Ty| ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï] = Ty.arrow .nat (.arrow .nat .nat) := rfl
    example: [Ty| (‚Ñï ‚Üí ‚Ñï) ‚Üí ‚Ñï] = Ty.arrow (.arrow .nat .nat) .nat := rfl

    example: [Ty| [ùîπ]] = Ty.list .bool := rfl

    example: [Ty| ‚Ñï + ùîπ ‚Üí ‚Ñï √ó ùîπ ‚Üí [‚Ñï]] = Ty.arrow (.sum .nat .bool) (.arrow (.prod .nat .bool) (.list .nat)) := rfl
  end

  inductive Term: Type where
    | var (id: String): Term
    | abs (arg: String) (ty: Ty) (b: Term): Term
    | app (f x: Term): Term

    | true: Term
    | false: Term
    | and (t‚ÇÅ t‚ÇÇ: Term): Term
    | or (t‚ÇÅ t‚ÇÇ: Term): Term
    | not (t: Term): Term
    | bcase (c t f: Term): Term

    | const (n: Nat): Term
    | pred (t: Term): Term
    | succ (t: Term): Term
    | add (t‚ÇÅ t‚ÇÇ: Term): Term
    | sub (t‚ÇÅ t‚ÇÇ: Term): Term
    | mul (t‚ÇÅ t‚ÇÇ: Term): Term
    | div (t‚ÇÅ t‚ÇÇ: Term): Term
    | mod (t‚ÇÅ t‚ÇÇ: Term): Term
    | exp (t‚ÇÅ t‚ÇÇ: Term): Term

    | eq (t‚ÇÅ t‚ÇÇ: Term): Term
    | neq (t‚ÇÅ t‚ÇÇ: Term): Term
    | lt (t‚ÇÅ t‚ÇÇ: Term): Term
    | le (t‚ÇÅ t‚ÇÇ: Term): Term
    | gt (t‚ÇÅ t‚ÇÇ: Term): Term
    | ge (t‚ÇÅ t‚ÇÇ: Term): Term

    | ite (c t f: Term): Term

    | inl (ty: Ty) (t: Term): Term
    | inr (ty: Ty) (t: Term): Term
    | scase (s: Term) (p‚ÇÅ: String) (b‚ÇÅ: Term) (id‚ÇÇ: String) (b‚ÇÇ: Term): Term

    | nil: Term
    | cons (hd tl: Term): Term
    | lcase (l: Term) (b‚ÇÅ: Term) (hd tl: String) (b‚ÇÇ: Term): Term

    | unit: Term

    | pair (l r: Term): Term
    | fst (p: Term): Term
    | snd (p: Term): Term
    | pcase (p: Term) (id‚ÇÅ id‚ÇÇ: String) (b: Term): Term

    | let (id: String) (t‚ÇÅ t‚ÇÇ: Term): Term

    | fix (f: Term): Term
  deriving Repr

  @[reducible]
  def Term.ofBool: Bool ‚Üí Term
    | .true => .true
    | .false => .false

  section
    declare_syntax_cat stlc

    syntax "(" stlc ")" : stlc
    syntax:max "‚Äπ" term "‚Ä∫" : stlc

    syntax:max ident : stlc
    syntax:max "‚Äπid:" term "‚Ä∫" : stlc
    syntax:25 "Œª" ident ":" stlc_ty "." stlc : stlc
    syntax:25 "Œª" "‚Äπ" term "‚Ä∫" ":" stlc_ty "." stlc : stlc
    syntax:85 stlc:85 stlc:86 : stlc

    syntax:max "tru" : stlc
    syntax:max "fls" : stlc
    syntax:max "‚Äπbool:" term "‚Ä∫" : stlc
    syntax:35 stlc:35 "‚àß" stlc:36 : stlc
    syntax:30 stlc:30 "‚à®" stlc:31 : stlc
    syntax:max "¬¨" stlc:95 : stlc
    syntax "case" stlc "of" "|" "tru" "‚áí" stlc "|" "fls" "‚áí" stlc : stlc

    syntax:max num : stlc
    syntax:max "‚Äπnat:" term "‚Ä∫" : stlc
    syntax:85 "succ" stlc:84 : stlc
    syntax:85 "pred" stlc:84 : stlc
    syntax:65 stlc:65 "+" stlc:66 : stlc
    syntax:65 stlc:65 "-" stlc:66 : stlc
    syntax:70 stlc:70 "*" stlc:71 : stlc
    syntax:70 stlc:70 "/" stlc:71 : stlc
    syntax:70 stlc:70 "%" stlc:71 : stlc
    syntax:80 stlc:81 "^" stlc:80 : stlc

    syntax:50 stlc:50 "=" stlc:50 : stlc
    syntax:50 stlc:50 "‚â†" stlc:50 : stlc
    syntax:50 stlc:50 "‚â§" stlc:50 : stlc
    syntax:50 stlc:50 "<" stlc:50 : stlc
    syntax:50 stlc:50 "‚â•" stlc:50 : stlc
    syntax:50 stlc:50 ">" stlc:50 : stlc

    syntax "ite" stlc "then" stlc "else" stlc : stlc

    syntax "inl" stlc ":" stlc_ty : stlc
    syntax "inr" stlc ":" stlc_ty : stlc
    syntax "case" stlc "of" "|" "inl" ident "‚áí" stlc "|" "inr" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "inl" ident "‚áí" stlc "|" "inr" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "inl" "‚Äπ" term "‚Ä∫" "‚áí" stlc "|" "inr" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "inl" "‚Äπ" term "‚Ä∫" "‚áí" stlc "|" "inr" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc

    syntax:max "[]" : stlc
    syntax:65 stlc:66 "::" stlc:65 : stlc
    syntax "[" stlc,* "]" : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" ident "::" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" ident "::" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" "‚Äπ" term "‚Ä∫" "::" ident "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "nil" "‚áí" stlc "|" "‚Äπ" term "‚Ä∫" "::" "‚Äπ" term "‚Ä∫" "‚áí" stlc : stlc

    syntax:max "()" : stlc

    syntax "(" stlc "," stlc ")" : stlc
    syntax:85 "fst" stlc:84 : stlc
    syntax:85 "snd" stlc:84 : stlc
    syntax "case" stlc "of" "|" "(" ident "," ident ")" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "(" ident "," "‚Äπ" term "‚Ä∫" ")" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "(" "‚Äπ" term "‚Ä∫" "," ident ")" "‚áí" stlc : stlc
    syntax "case" stlc "of" "|" "(" "‚Äπ" term "‚Ä∫" "," "‚Äπ" term "‚Ä∫" ")" "‚áí" stlc : stlc

    syntax:20 "let" ident "=" stlc "in" stlc : stlc
    syntax:20 "let" "‚Äπ" term "‚Ä∫" "=" stlc "in" stlc : stlc

    syntax:60 "fix" stlc:60 : stlc

    syntax "[Term|" stlc "]" : term

    macro_rules
      | `([Term| ( $t )])                                                         => `([Term| $t])
      | `([Term| ‚Äπ $t:term ‚Ä∫])                                                    => `($(Lean.quote t))

      | `([Term| $id:ident])                                                      => `(Term.var $(Lean.quote (toString id.getId)))
      | `([Term| ‚Äπid: $id:term ‚Ä∫])                                                => `(Term.var $(Lean.quote id))
      | `([Term| Œª $id : $ty . $t])                                               => `(Term.abs $(Lean.quote (toString id.getId)) [Ty| $ty] [Term| $t])
      | `([Term| Œª ‚Äπ $id:term ‚Ä∫ : $ty . $t])                                      => `(Term.abs $(Lean.quote id) [Ty| $ty] [Term| $t])
      | `([Term| $t‚ÇÅ $t‚ÇÇ])                                                        => `(Term.app [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| tru])                                                            => `(Term.true)
      | `([Term| fls])                                                            => `(Term.false)
      | `([Term| ‚Äπbool: $b:term ‚Ä∫])                                               => `(Term.ofBool $(Lean.quote b))
      | `([Term| $t‚ÇÅ ‚àß $t‚ÇÇ])                                                      => `(Term.and [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚à® $t‚ÇÇ])                                                      => `(Term.or [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| ¬¨ $t])                                                           => `(Term.not [Term| $t])
      | `([Term| case $c of | tru ‚áí $t | fls ‚áí $f])                               => `(Term.bcase [Term| $c] [Term| $t] [Term| $f])

      | `([Term| $n:num])                                                         => `(Term.const $n)
      | `([Term| ‚Äπnat: $n:term ‚Ä∫])                                                => `(Term.const $(Lean.quote n))
      | `([Term| succ $t])                                                        => `(Term.succ [Term| $t])
      | `([Term| pred $t])                                                        => `(Term.pred [Term| $t])
      | `([Term| $t‚ÇÅ + $t‚ÇÇ])                                                      => `(Term.add [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ - $t‚ÇÇ])                                                      => `(Term.sub [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ * $t‚ÇÇ])                                                      => `(Term.mul [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ / $t‚ÇÇ])                                                      => `(Term.div [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ % $t‚ÇÇ])                                                      => `(Term.mod [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ^ $t‚ÇÇ])                                                      => `(Term.exp [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| $t‚ÇÅ = $t‚ÇÇ])                                                      => `(Term.eq [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚â† $t‚ÇÇ])                                                      => `(Term.neq [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ < $t‚ÇÇ])                                                      => `(Term.lt [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚â§ $t‚ÇÇ])                                                      => `(Term.le [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ > $t‚ÇÇ])                                                      => `(Term.gt [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| $t‚ÇÅ ‚â• $t‚ÇÇ])                                                      => `(Term.ge [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| ite $c then $t else $f])                                         => `(Term.ite [Term| $c] [Term| $t] [Term| $f])

      | `([Term| inl $t : $ty])                                                   => `(Term.inl [Ty| $ty] [Term| $t])
      | `([Term| inr $t : $ty])                                                   => `(Term.inr [Ty| $ty] [Term| $t])
      | `([Term| case $s of | inl $id‚ÇÅ ‚áí $t‚ÇÅ | inr $id‚ÇÇ ‚áí $t‚ÇÇ])                   => `(Term.scase [Term| $s] $(Lean.quote (toString (id‚ÇÅ).getId)) [Term| $t‚ÇÅ] $(Lean.quote (toString (id‚ÇÇ).getId)) [Term| $t‚ÇÇ])
      | `([Term| case $s of | inl $id‚ÇÅ ‚áí $t‚ÇÅ | inr ‚Äπ $id‚ÇÇ:term ‚Ä∫ ‚áí $t‚ÇÇ])          => `(Term.scase [Term| $s] $(Lean.quote (toString (id‚ÇÅ).getId)) [Term| $t‚ÇÅ] $(Lean.quote id‚ÇÇ) [Term| $t‚ÇÇ])
      | `([Term| case $s of | inl ‚Äπ $id‚ÇÅ:term ‚Ä∫ ‚áí $t‚ÇÅ | inr $id‚ÇÇ ‚áí $t‚ÇÇ])          => `(Term.scase [Term| $s] $(Lean.quote id‚ÇÅ) [Term| $t‚ÇÅ] $(Lean.quote (toString (id‚ÇÇ).getId)) [Term| $t‚ÇÇ])
      | `([Term| case $s of | inl ‚Äπ $id‚ÇÅ:term ‚Ä∫ ‚áí $t‚ÇÅ | inr ‚Äπ $id‚ÇÇ:term ‚Ä∫ ‚áí $t‚ÇÇ]) => `(Term.scase [Term| $s] $(Lean.quote id‚ÇÅ) [Term| $t‚ÇÅ] $(Lean.quote id‚ÇÇ) [Term| $t‚ÇÇ])

      | `([Term| $hd :: $tl])                                                     => `(Term.cons [Term| $hd] [Term| $tl])
      | `([Term| [] ])                                                            => `(Term.nil)
      | `([Term| [ $hd ] ])                                                       => `(Term.cons [Term| $hd] .nil)
      | `([Term| [ $hd , $tl:stlc,* ] ])                                          => `(Term.cons [Term| $hd] [Term| [ $tl,* ]])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | $hd :: $tl ‚áí $t‚ÇÇ])                      => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote (toString hd.getId)) $(Lean.quote (toString tl.getId)) [Term| $t‚ÇÇ])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | $hd :: ‚Äπ $tl ‚Ä∫ ‚áí $t‚ÇÇ])                  => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote (toString hd.getId)) $(Lean.quote tl) [Term| $t‚ÇÇ])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | ‚Äπ $hd ‚Ä∫ :: $tl ‚áí $t‚ÇÇ])                  => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote hd) $(Lean.quote (toString tl.getId)) [Term| $t‚ÇÇ])
      | `([Term| case $l of | nil ‚áí $t‚ÇÅ | ‚Äπ $hd ‚Ä∫ :: ‚Äπ $tl ‚Ä∫ ‚áí $t‚ÇÇ])              => `(Term.lcase [Term| $l] [Term| $t‚ÇÅ] $(Lean.quote hd) $(Lean.quote tl) [Term| $t‚ÇÇ])

      | `([Term| () ])                                                            => `(Term.unit)

      | `([Term| ( $t‚ÇÅ , $t‚ÇÇ )])                                                  => `(Term.pair [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| fst $t])                                                         => `(Term.fst [Term| $t])
      | `([Term| snd $t])                                                         => `(Term.snd [Term| $t])
      | `([Term| case $p of | ( $f , $s ) ‚áí $t])                                  => `(Term.pcase [Term| $p] $(Lean.quote (toString f.getId)) $(Lean.quote (toString s.getId)) [Term| $t])
      | `([Term| case $p of | ( $f , ‚Äπ $s ‚Ä∫ ) ‚áí $t])                              => `(Term.pcase [Term| $p] $(Lean.quote (toString f.getId)) $(Lean.quote s) [Term| $t])
      | `([Term| case $p of | ( ‚Äπ $f ‚Ä∫ , $s ) ‚áí $t])                              => `(Term.pcase [Term| $p] $(Lean.quote f) $(Lean.quote (toString s.getId)) [Term| $t])
      | `([Term| case $p of | ( ‚Äπ $f ‚Ä∫ , ‚Äπ $s ‚Ä∫ ) ‚áí $t])                          => `(Term.pcase [Term| $p] $(Lean.quote f) $(Lean.quote s) [Term| $t])

      | `([Term| let $id = $t‚ÇÅ in $t‚ÇÇ])                                           => `(Term.let $(Lean.quote (toString id.getId)) [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])
      | `([Term| let ‚Äπ $id:term ‚Ä∫ = $t‚ÇÅ in $t‚ÇÇ])                                  => `(Term.let $(Lean.quote id) [Term| $t‚ÇÅ] [Term| $t‚ÇÇ])

      | `([Term| fix $t])                                                         => `(Term.fix [Term| $t])
  end

  section
    variable {id id‚ÇÅ id‚ÇÇ: String}
    variable {n: Nat}
    variable {b: Bool}
    variable {c c‚ÇÅ c‚ÇÇ t t‚ÇÅ t‚ÇÇ t‚ÇÉ t‚ÇÑ t‚ÇÖ t‚ÇÜ t‚Çá f f‚ÇÅ f‚ÇÇ: Term}
    variable {ty ty‚ÇÅ ty‚ÇÇ: Ty}

    example: [Term| ‚Äπt‚Ä∫] = t := rfl
    example: [Term| (‚Äπt‚Ä∫)] = t := rfl

    example: [Term| foo] = Term.var "foo" := rfl
    example: [Term| ‚Äπid:id‚Ä∫] = Term.var id := rfl
    example: [Term| Œª x: ùîπ. y] = Term.abs "x" .bool (.var "y") := rfl
    example: [Term| Œª ‚Äπid‚Ä∫: ùîπ. y] = Term.abs id .bool (.var "y") := rfl
    example: [Term| Œª f: ‚Ñï ‚Üí ‚Ñï. Œª x: ‚Ñï. f x] = Term.abs "f" (.arrow .nat .nat) (.abs "x" .nat (.app (.var "f") (.var "x"))) := rfl
    example: [Term| f x] = Term.app (.var "f") (.var "x") := rfl
    example: [Term| f x y z] = Term.app (.app (.app (.var "f") (.var "x")) (.var "y")) (.var "z") := rfl

    example: [Term| tru] = Term.true := rfl
    example: [Term| fls] = Term.false := rfl
    example: [Term| ‚Äπbool:true‚Ä∫] = Term.true := rfl
    example: [Term| ‚Äπbool:false‚Ä∫] = Term.false := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫] = Term.and t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫] = Term.and (.and t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß (‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫)] = Term.and t‚ÇÅ (.and t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫] = Term.or t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫] = Term.or (.or t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® (‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫)] = Term.or t‚ÇÅ (.or t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫ ‚àß ‚Äπt‚ÇÑ‚Ä∫] = Term.or (.and t‚ÇÅ t‚ÇÇ) (.and t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ¬¨ ‚Äπt‚Ä∫] = Term.not t := rfl
    example: [Term| ¬¨ ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫] = Term.and (.not t‚ÇÅ) t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚à® ¬¨ ‚Äπt‚ÇÇ‚Ä∫] = Term.or t‚ÇÅ (.not t‚ÇÇ) := rfl
    example: [Term| case ‚Äπc‚Ä∫ of | tru ‚áí ‚Äπt‚Ä∫ | fls ‚áí ‚Äπf‚Ä∫] = Term.bcase c t f := rfl

    example: [Term| 42] = Term.const 42 := rfl
    example: [Term| ‚Äπnat:n‚Ä∫] = Term.const n := rfl
    example: [Term| succ ‚Äπt‚Ä∫] = Term.succ t := rfl
    example: [Term| succ succ ‚Äπt‚Ä∫] = Term.succ (.succ t) := rfl
    example: [Term| pred ‚Äπt‚Ä∫] = Term.pred t := rfl
    example: [Term| pred pred ‚Äπt‚Ä∫] = Term.pred (.pred t) := rfl
    example: [Term| pred succ ‚Äπt‚Ä∫] = Term.pred (.succ t) := rfl
    example: [Term| succ pred ‚Äπt‚Ä∫] = Term.succ (.pred t) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫] = Term.add t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫] = Term.add (.add t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + (‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫)] = Term.add t‚ÇÅ (.add t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ + succ ‚Äπt‚ÇÇ‚Ä∫] = Term.add (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ + pred ‚Äπt‚ÇÇ‚Ä∫] = Term.add (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ + pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.add (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫] = Term.sub t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫] = Term.sub (.sub t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - (‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫)] = Term.sub t‚ÇÅ (.sub t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ - succ ‚Äπt‚ÇÇ‚Ä∫] = Term.sub (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ - pred ‚Äπt‚ÇÇ‚Ä∫] = Term.sub (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ - pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.sub (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫] = Term.mul t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫] = Term.mul (.mul t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * (‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫)] = Term.mul t‚ÇÅ (.mul t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ * succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mul (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ * pred ‚Äπt‚ÇÇ‚Ä∫] = Term.mul (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ * pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mul (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫] = Term.div t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫] = Term.div (.div t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / (‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫)] = Term.div t‚ÇÅ (.div t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ / succ ‚Äπt‚ÇÇ‚Ä∫] = Term.div (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ / pred ‚Äπt‚ÇÇ‚Ä∫] = Term.div (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ / pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.div (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÇ‚Ä∫] = Term.mod t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ % ‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫] = Term.mod (.mod t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ % (‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫)] = Term.mod t‚ÇÅ (.mod t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ % succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mod (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ % pred ‚Äπt‚ÇÇ‚Ä∫] = Term.mod (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ % pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.mod (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫] = Term.exp t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫ ^ ‚Äπt‚ÇÉ‚Ä∫] = Term.exp t‚ÇÅ (.exp t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| (‚Äπt‚ÇÅ‚Ä∫ ^ ‚Äπt‚ÇÇ‚Ä∫) ^ ‚Äπt‚ÇÉ‚Ä∫] = Term.exp (.exp t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| succ ‚Äπt‚ÇÅ‚Ä∫ ^ succ ‚Äπt‚ÇÇ‚Ä∫] = Term.exp (.succ t‚ÇÅ) (.succ t‚ÇÇ) := rfl
    example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ ^ pred ‚Äπt‚ÇÇ‚Ä∫] = Term.exp (.pred t‚ÇÅ) (.pred t‚ÇÇ) := rfl
    example: [Term| succ pred ‚Äπt‚ÇÅ‚Ä∫ ^ pred succ ‚Äπt‚ÇÇ‚Ä∫] = Term.exp (.succ (.pred t‚ÇÅ)) (.pred (.succ t‚ÇÇ)) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ - ‚Äπt‚ÇÉ‚Ä∫] = Term.add t‚ÇÅ (.sub t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ - ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫] = Term.sub t‚ÇÅ (.add t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ / ‚Äπt‚ÇÉ‚Ä∫] = Term.mul t‚ÇÅ (.div t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ / ‚Äπt‚ÇÇ‚Ä∫ * ‚Äπt‚ÇÉ‚Ä∫] = Term.div t‚ÇÅ (.mul t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ % ‚Äπt‚ÇÉ‚Ä∫] = Term.mul t‚ÇÅ (.div t‚ÇÇ t‚ÇÉ) := rfl
    -- example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ + ‚Äπt‚ÇÉ‚Ä∫ * ‚Äπt‚ÇÑ‚Ä∫] = Term.add (.mul t‚ÇÅ t‚ÇÇ) (.mul t‚ÇÉ t‚ÇÑ) := rfl
    -- example: [Term| pred ‚Äπt‚ÇÅ‚Ä∫ * succ ‚Äπt‚ÇÇ‚Ä∫ + f ‚Äπt‚ÇÉ‚Ä∫ / ‚Äπt‚ÇÑ‚Ä∫ - ‚Äπt‚ÇÖ‚Ä∫ % ‚Äπt‚ÇÜ‚Ä∫ ^ ‚Äπt‚Çá‚Ä∫] =
    --   Term.add
    --     (.mul
    --       (.pred t‚ÇÅ)
    --       (.succ t‚ÇÇ))
    --     (Term.sub
    --       (.div
    --         (.app (.var "f") t‚ÇÉ)
    --         t‚ÇÑ)
    --       (.mod
    --         t‚ÇÖ
    --         (.exp t‚ÇÜ t‚Çá))) := rfl
    -- Term.sub
    --   (Term.add
    --     (Term.mul
    --       (Term.pred t‚ÇÅ)
    --       (Term.succ t‚ÇÇ))
    --     (Term.div
    --       (Term.app (Term.var "f") t‚ÇÉ)
    --       t‚ÇÑ))
    --   (Term.mod
    --     t‚ÇÖ
    --     (Term.exp t‚ÇÜ t‚Çá))

    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫] = Term.eq t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â† ‚Äπt‚ÇÇ‚Ä∫] = Term.neq t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ < ‚Äπt‚ÇÇ‚Ä∫] = Term.lt t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â§ ‚Äπt‚ÇÇ‚Ä∫] = Term.le t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ > ‚Äπt‚ÇÇ‚Ä∫] = Term.gt t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚â• ‚Äπt‚ÇÇ‚Ä∫] = Term.ge t‚ÇÅ t‚ÇÇ := rfl

    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ = ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.eq (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ ‚â† ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.neq (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ < ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.lt (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ ‚â§ ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.le (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ > ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.gt (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ + ‚Äπt‚ÇÇ‚Ä∫ ‚â• ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫] = Term.ge (.add t‚ÇÅ t‚ÇÇ) (.exp t‚ÇÉ t‚ÇÑ) := rfl

    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.and (.eq t‚ÇÅ t‚ÇÇ) (.neq t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ ‚à® ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.or (.eq t‚ÇÅ t‚ÇÇ) (.neq t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ¬¨‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.and (.eq (.not t‚ÇÅ) t‚ÇÇ) (.neq t‚ÇÉ t‚ÇÑ) := rfl
    example: [Term| ¬¨(‚Äπt‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÇ‚Ä∫) ‚àß ‚Äπt‚ÇÉ‚Ä∫ ‚â† ‚Äπt‚ÇÑ‚Ä∫] = Term.and (.not (.eq t‚ÇÅ t‚ÇÇ)) (.neq t‚ÇÉ t‚ÇÑ) := rfl

    example: [Term| ite ‚Äπc‚Ä∫ then ‚Äπt‚Ä∫ else ‚Äπf‚Ä∫] = Term.ite c t f := rfl
    example: [Term| ite ‚Äπc‚Ä∫ ‚Äπt‚ÇÅ‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫ then ‚Äπt‚Ä∫ ‚Äπt‚ÇÉ‚Ä∫ ‚Äπt‚ÇÑ‚Ä∫ else ‚Äπf‚Ä∫ ‚Äπt‚ÇÖ‚Ä∫ ‚Äπt‚ÇÜ‚Ä∫] = Term.ite (.app (.app c t‚ÇÅ) t‚ÇÇ) (.app (.app t t‚ÇÉ) t‚ÇÑ) (.app (.app f t‚ÇÖ) t‚ÇÜ) := rfl
    example: [Term| ite ‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫ then ‚Äπt‚ÇÉ‚Ä∫ ‚à® ‚Äπt‚ÇÑ‚Ä∫ else ‚Äπt‚ÇÖ‚Ä∫ ‚â† ‚Äπt‚ÇÜ‚Ä∫] = Term.ite (.and t‚ÇÅ t‚ÇÇ) (.or t‚ÇÉ t‚ÇÑ) (.neq t‚ÇÖ t‚ÇÜ) := rfl

    example: [Term| inl 42: ‚Ñï] = Term.inl .nat (.const 42) := rfl
    example: [Term| inr tru: ùîπ] = Term.inr .bool .true := rfl
    example: [Term| inl 1 + 2: ‚Ñï ‚àß inr ¬¨ tru: ùîπ] = Term.and (.inl .nat (.add (.const 1) (.const 2))) (.inr .bool (.not .true)) := rfl
    example: [Term| inl 1 + 2: ‚Ñï ‚â† inr ¬¨ tru: ùîπ] = Term.neq (.inl .nat (.add (.const 1) (.const 2))) (.inr .bool (.not .true)) := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl x ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr y ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ "x" t‚ÇÇ "y" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr y ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ id‚ÇÅ t‚ÇÇ "y" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl x ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ "x" t‚ÇÇ id‚ÇÇ t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.scase t‚ÇÅ id‚ÇÅ t‚ÇÇ id‚ÇÇ t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | inl ‚Äπid‚ÇÅ‚Ä∫ ‚áí ‚Äπt‚ÇÇ‚Ä∫ ‚àß ‚Äπt‚ÇÉ‚Ä∫ * ‚Äπt‚ÇÑ‚Ä∫ | inr ‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÖ‚Ä∫ ‚à® ‚Äπt‚ÇÜ‚Ä∫] = Term.scase t‚ÇÅ id‚ÇÅ (.and t‚ÇÇ (.mul t‚ÇÉ t‚ÇÑ)) id‚ÇÇ (.or t‚ÇÖ t‚ÇÜ) := rfl

    example: [Term| []] = Term.nil := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫] = Term.cons t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÉ‚Ä∫] = Term.cons t‚ÇÅ (.cons t‚ÇÇ t‚ÇÉ) := rfl
    example: [Term| (‚Äπt‚ÇÅ‚Ä∫ :: ‚Äπt‚ÇÇ‚Ä∫) :: ‚Äπt‚ÇÉ‚Ä∫] = Term.cons (.cons t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫]] = Term.cons t‚ÇÅ .nil := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫]] = Term.cons t‚ÇÅ (.cons t‚ÇÇ .nil) := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫, ‚Äπt‚ÇÇ‚Ä∫, ‚Äπt‚ÇÉ‚Ä∫]] = Term.cons t‚ÇÅ (.cons t‚ÇÇ (.cons t‚ÇÉ .nil)) := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ :: []] = Term.cons t‚ÇÅ .nil := rfl
    example: [Term| [‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫, ‚Äπt‚ÇÉ‚Ä∫ ^ ‚Äπt‚ÇÑ‚Ä∫]] = Term.cons (.and t‚ÇÅ t‚ÇÇ) (.cons (.exp t‚ÇÉ t‚ÇÑ) .nil) := rfl
    example: [Term| (‚Äπt‚ÇÅ‚Ä∫ ‚àß ‚Äπt‚ÇÇ‚Ä∫) :: ‚Äπt‚ÇÑ‚Ä∫] = Term.cons (.and t‚ÇÅ t‚ÇÇ) t‚ÇÑ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ * ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÑ‚Ä∫] = Term.cons (.mul t‚ÇÅ t‚ÇÇ) t‚ÇÑ := rfl
    example: [Term| ‚Äπt‚ÇÅ‚Ä∫ ‚Äπt‚ÇÇ‚Ä∫ :: ‚Äπt‚ÇÑ‚Ä∫] = Term.cons (.app t‚ÇÅ t‚ÇÇ) t‚ÇÑ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | hd::tl ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ "hd" "tl" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | hd::‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ "hd" id‚ÇÇ t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫::tl ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ id‚ÇÅ "tl" t‚ÇÉ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | nil ‚áí ‚Äπt‚ÇÇ‚Ä∫ | ‚Äπid‚ÇÅ‚Ä∫::‚Äπid‚ÇÇ‚Ä∫ ‚áí ‚Äπt‚ÇÉ‚Ä∫] = Term.lcase t‚ÇÅ t‚ÇÇ id‚ÇÅ id‚ÇÇ t‚ÇÉ := rfl

    example: [Term| ()] = Term.unit := rfl

    example: [Term| (tru, 42)] = Term.pair .true (.const 42) := rfl
    example: [Term| fst ‚Äπt‚ÇÅ‚Ä∫] = Term.fst t‚ÇÅ := rfl
    example: [Term| snd ‚Äπt‚ÇÅ‚Ä∫] = Term.snd t‚ÇÅ := rfl
    example: [Term| fst snd ‚Äπt‚ÇÅ‚Ä∫] = Term.fst (.snd t‚ÇÅ) := rfl
    example: [Term| fst ‚Äπt‚ÇÅ‚Ä∫ ^ snd ‚Äπt‚ÇÅ‚Ä∫] = Term.exp (.fst t‚ÇÅ) (.snd t‚ÇÅ) := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (f, s) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ "f" "s" t‚ÇÇ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (f, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ "f" id‚ÇÇ t‚ÇÇ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, s) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ id‚ÇÅ "s" t‚ÇÇ := rfl
    example: [Term| case ‚Äπt‚ÇÅ‚Ä∫ of | (‚Äπid‚ÇÅ‚Ä∫, ‚Äπid‚ÇÇ‚Ä∫) ‚áí ‚Äπt‚ÇÇ‚Ä∫] = Term.pcase t‚ÇÅ id‚ÇÅ id‚ÇÇ t‚ÇÇ := rfl

    example: [Term| let x = ‚Äπt‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÇ‚Ä∫] = Term.let "x" t‚ÇÅ t‚ÇÇ := rfl
    example: [Term| let x = ‚Äπt‚ÇÅ‚Ä∫ ‚à® ‚Äπt‚ÇÇ‚Ä∫ in ‚Äπt‚ÇÉ‚Ä∫] = Term.let "x" (.or t‚ÇÅ t‚ÇÇ) t‚ÇÉ := rfl
    example: [Term| let ‚Äπid‚ÇÅ‚Ä∫ = ‚Äπt‚ÇÅ‚Ä∫ in ‚Äπt‚ÇÇ‚Ä∫] = Term.let id‚ÇÅ t‚ÇÅ t‚ÇÇ := rfl

    example: [Term| fix ‚Äπt‚ÇÅ‚Ä∫] = Term.fix t‚ÇÅ := rfl
    example: [Term| fix (Œª ‚Äπid‚ÇÅ‚Ä∫: ‚Ñï. ‚Äπt‚ÇÅ‚Ä∫)] = Term.fix (.abs id‚ÇÅ .nat t‚ÇÅ) := rfl
  end
end SoftwareFoundations.ProgrammingLanguageFoundations.MoreStlc
